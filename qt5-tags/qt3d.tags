<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="namespace">
        <name>Qt3DAnimation</name>
        <filename>qt3danimation.html</filename>
        <class>Qt3DAnimation::QAbstractAnimation</class>
        <class>Qt3DAnimation::QAbstractAnimationClip</class>
        <class>Qt3DAnimation::QAbstractClipAnimator</class>
        <class>Qt3DAnimation::QAbstractClipBlendNode</class>
        <class>Qt3DAnimation::QAdditiveClipBlend</class>
        <class>Qt3DAnimation::QAnimationAspect</class>
        <class>Qt3DAnimation::QAnimationClip</class>
        <class>Qt3DAnimation::QAnimationClipData</class>
        <class>Qt3DAnimation::QAnimationClipLoader</class>
        <class>Qt3DAnimation::QAnimationController</class>
        <class>Qt3DAnimation::QAnimationGroup</class>
        <class>Qt3DAnimation::QBlendedClipAnimator</class>
        <class>Qt3DAnimation::QChannel</class>
        <class>Qt3DAnimation::QChannelComponent</class>
        <class>Qt3DAnimation::QChannelMapper</class>
        <class>Qt3DAnimation::QChannelMapping</class>
        <class>Qt3DAnimation::QClipAnimator</class>
        <class>Qt3DAnimation::QClipBlendNodeCreatedChangeBase</class>
        <member kind="typedef" type="">
            <name>QClipBlendNodeCreatedChangeBasePtr</name>
            <anchorfile>qt3danimation.html</anchorfile>
            <anchor>QClipBlendNodeCreatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DAnimation::QClipBlendNodeCreatedChange</class>
        <class>Qt3DAnimation::QClipBlendValue</class>
        <class>Qt3DAnimation::QKeyFrame</class>
        <class>Qt3DAnimation::QKeyframeAnimation</class>
        <class>Qt3DAnimation::QLerpClipBlend</class>
        <class>Qt3DAnimation::QMorphingAnimation</class>
        <class>Qt3DAnimation::QMorphTarget</class>
        <class>Qt3DAnimation::QVertexBlendAnimation</class>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAbstractAnimation</name>
        <filename>qt3danimation-qabstractanimation.html</filename>
        <base>QObject</base>
        <member kind="property" type="QString">
            <name>animationName</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QAbstractAnimation::AnimationType">
            <name>animationType</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>position</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>duration</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AnimationType</name>
            <anchor>AnimationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeyframeAnimation">
            <anchor>AnimationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MorphingAnimation">
            <anchor>AnimationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VertexBlendAnimation">
            <anchor>AnimationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>animationName</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAnimation::AnimationType</type>
            <name>animationType</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>position</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>duration</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnimationName</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAnimation</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>QAbstractAnimation</anchor>
            <arglist>(QAbstractAnimationPrivate &amp;dd, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setDuration</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>setDuration</anchor>
            <arglist>(float duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>animationNameChanged</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>durationChanged</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(float duration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAbstractAnimationClip</name>
        <filename>qt3danimation-qabstractanimationclip.html</filename>
        <base>QNode</base>
        <member kind="property" type="float">
            <name>duration</name>
            <anchorfile>qt3danimation-qabstractanimationclip.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractAnimationClip</name>
            <anchorfile>qt3danimation-qabstractanimationclip.html</anchorfile>
            <anchor>dtor.QAbstractAnimationClip</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>duration</name>
            <anchorfile>qt3danimation-qabstractanimationclip.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>durationChanged</name>
            <anchorfile>qt3danimation-qabstractanimationclip.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(float duration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAbstractClipAnimator</name>
        <filename>qt3danimation-qabstractclipanimator.html</filename>
        <base>QComponent</base>
        <member kind="property" type="bool">
            <name>running</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>loops</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>loops-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DAnimation::QChannelMapper *">
            <name>channelMapper</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>channelMapper-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Loops</name>
            <anchor>Loops-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Infinite">
            <anchor>Loops-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractClipAnimator</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>dtor.QAbstractClipAnimator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QChannelMapper *</type>
            <name>channelMapper</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>channelMapper-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopCount</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>loops-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRunning</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist>(bool running)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChannelMapper</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>channelMapper-prop</anchor>
            <arglist>(Qt3DAnimation::QChannelMapper *channelMapper)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoopCount</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>loops-prop</anchor>
            <arglist>(int loops)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>runningChanged</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist>(bool running)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>channelMapperChanged</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>channelMapper-prop</anchor>
            <arglist>(Qt3DAnimation::QChannelMapper *channelMapper)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loopCountChanged</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>loops-prop</anchor>
            <arglist>(int loops)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractClipAnimator</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>QAbstractClipAnimator</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractClipAnimator</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>QAbstractClipAnimator-1</anchor>
            <arglist>(QAbstractClipAnimatorPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAbstractClipBlendNode</name>
        <filename>qt3danimation-qabstractclipblendnode.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractClipBlendNode</name>
            <anchorfile>qt3danimation-qabstractclipblendnode.html</anchorfile>
            <anchor>dtor.QAbstractClipBlendNode</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAdditiveClipBlend</name>
        <filename>qt3danimation-qadditiveclipblend.html</filename>
        <base>QAbstractClipBlendNode</base>
        <member kind="property" type="Qt3DAnimation::QAbstractClipBlendNode *">
            <name>baseClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>baseClip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DAnimation::QAbstractClipBlendNode *">
            <name>additiveClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveClip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>additiveFactor</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveFactor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAdditiveClipBlend</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>QAdditiveClipBlend</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAdditiveClipBlend</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>dtor.QAdditiveClipBlend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>additiveFactor</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveFactor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractClipBlendNode *</type>
            <name>baseClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>baseClip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractClipBlendNode *</type>
            <name>additiveClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveClip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAdditiveFactor</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveFactor-prop</anchor>
            <arglist>(float additiveFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>baseClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *baseClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAdditiveClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *additiveClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>additiveFactorChanged</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveFactor-prop</anchor>
            <arglist>(float additiveFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>baseClipChanged</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>baseClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *baseClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>additiveClipChanged</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *additiveClip)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAdditiveClipBlend</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>QAdditiveClipBlend-1</anchor>
            <arglist>(QAdditiveClipBlendPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationAspect</name>
        <filename>qt3danimation-qanimationaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationAspect</name>
            <anchorfile>qt3danimation-qanimationaspect.html</anchorfile>
            <anchor>QAnimationAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationClip</name>
        <filename>qt3danimation-qanimationclip.html</filename>
        <base>QAbstractAnimationClip</base>
        <member kind="property" type="Qt3DAnimation::QAnimationClipData">
            <name>clipData</name>
            <anchorfile>qt3danimation-qanimationclip.html</anchorfile>
            <anchor>clipData-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationClip</name>
            <anchorfile>qt3danimation-qanimationclip.html</anchorfile>
            <anchor>QAnimationClip</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAnimationClip</name>
            <anchorfile>qt3danimation-qanimationclip.html</anchorfile>
            <anchor>dtor.QAnimationClip</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAnimationClipData</type>
            <name>clipData</name>
            <anchorfile>qt3danimation-qanimationclip.html</anchorfile>
            <anchor>clipData-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipData</name>
            <anchorfile>qt3danimation-qanimationclip.html</anchorfile>
            <anchor>clipData-prop</anchor>
            <arglist>(const Qt3DAnimation::QAnimationClipData &amp;clipData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clipDataChanged</name>
            <anchorfile>qt3danimation-qanimationclip.html</anchorfile>
            <anchor>clipData-prop</anchor>
            <arglist>(Qt3DAnimation::QAnimationClipData clipData)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAnimationClip</name>
            <anchorfile>qt3danimation-qanimationclip.html</anchorfile>
            <anchor>QAnimationClip-1</anchor>
            <arglist>(QAnimationClipPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationClipData</name>
        <filename>qt3danimation-qanimationclipdata.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationClipData</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>QAnimationClipData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationClipData</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>QAnimationClipData-1</anchor>
            <arglist>(const QAnimationClipData &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnimationClipData &amp;</type>
            <name>operator=</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QAnimationClipData &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAnimationClipData</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>dtor.QAnimationClipData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>channelCount</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>channelCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendChannel</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>appendChannel</anchor>
            <arglist>(const QChannel &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChannel</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>insertChannel</anchor>
            <arglist>(int index, const QChannel &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeChannel</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>removeChannel</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearChannels</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>clearChannels</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qt3danimation-qanimationclipdata.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationClipLoader</name>
        <filename>qt3danimation-qanimationcliploader.html</filename>
        <base>QAbstractAnimationClip</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationClipLoader</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>QAnimationClipLoader</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationClipLoader</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>QAnimationClipLoader-1</anchor>
            <arglist>(const QUrl &amp;source, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAnimationClipLoader</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>dtor.QAnimationClipLoader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotReady">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAnimationClipLoader</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>QAnimationClipLoader-2</anchor>
            <arglist>(QAnimationClipLoaderPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationController</name>
        <filename>qt3danimation-qanimationcontroller.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>activeAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>activeAnimationGroup-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>position</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>positionScale</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>positionOffset</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DCore::QEntity *">
            <name>entity</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>recursive</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationController</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>QAnimationController</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DAnimation::QAnimationGroup *&gt;</type>
            <name>animationGroupList</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>animationGroupList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>activeAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>activeAnimationGroup-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>position</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>positionScale</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>positionOffset</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionOffset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>entity</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>recursive</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnimationGroups</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>setAnimationGroups</anchor>
            <arglist>(const QVector&lt;Qt3DAnimation::QAnimationGroup *&gt; &amp;animationGroups)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>addAnimationGroup</anchor>
            <arglist>(Qt3DAnimation::QAnimationGroup *animationGroup)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>removeAnimationGroup</anchor>
            <arglist>(Qt3DAnimation::QAnimationGroup *animationGroup)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>getAnimationIndex</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>getAnimationIndex</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAnimationGroup *</type>
            <name>getGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>getGroup</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>activeAnimationGroup-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPositionScale</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionScale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPositionOffset</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionOffset-prop</anchor>
            <arglist>(float offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEntity</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRecursive</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>(bool recursive)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeAnimationGroupChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>activeAnimationGroup-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionScaleChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionScale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionOffsetChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionOffset-prop</anchor>
            <arglist>(float offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entityChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>recursiveChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>(bool recursive)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationGroup</name>
        <filename>qt3danimation-qanimationgroup.html</filename>
        <base>QObject</base>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>position</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>duration</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>QAnimationGroup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DAnimation::QAbstractAnimation *&gt;</type>
            <name>animationList</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>animationList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>position</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>duration</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnimations</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>setAnimations</anchor>
            <arglist>(const QVector&lt;Qt3DAnimation::QAbstractAnimation *&gt; &amp;animations)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAnimation</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>addAnimation</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAnimation</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>removeAnimation</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>durationChanged</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(float duration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QBlendedClipAnimator</name>
        <filename>qt3danimation-qblendedclipanimator.html</filename>
        <base>QAbstractClipAnimator</base>
        <member kind="property" type="Qt3DAnimation::QAbstractClipBlendNode *">
            <name>blendTree</name>
            <anchorfile>qt3danimation-qblendedclipanimator.html</anchorfile>
            <anchor>blendTree-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBlendedClipAnimator</name>
            <anchorfile>qt3danimation-qblendedclipanimator.html</anchorfile>
            <anchor>QBlendedClipAnimator</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBlendedClipAnimator</name>
            <anchorfile>qt3danimation-qblendedclipanimator.html</anchorfile>
            <anchor>dtor.QBlendedClipAnimator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractClipBlendNode *</type>
            <name>blendTree</name>
            <anchorfile>qt3danimation-qblendedclipanimator.html</anchorfile>
            <anchor>blendTree-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlendTree</name>
            <anchorfile>qt3danimation-qblendedclipanimator.html</anchorfile>
            <anchor>blendTree-prop</anchor>
            <arglist>(QAbstractClipBlendNode *blendTree)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blendTreeChanged</name>
            <anchorfile>qt3danimation-qblendedclipanimator.html</anchorfile>
            <anchor>blendTree-prop</anchor>
            <arglist>(QAbstractClipBlendNode *blendTree)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QChannel</name>
        <filename>qt3danimation-qchannel.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChannel</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>QChannel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChannel</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>QChannel-1</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChannel</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>QChannel-2</anchor>
            <arglist>(const QChannel &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChannel &amp;</type>
            <name>operator=</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QChannel &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QChannel</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>dtor.QChannel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>channelComponentCount</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>channelComponentCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendChannelComponent</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>appendChannelComponent</anchor>
            <arglist>(const QChannelComponent &amp;component)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChannelComponent</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>insertChannelComponent</anchor>
            <arglist>(int index, const QChannelComponent &amp;component)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeChannelComponent</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>removeChannelComponent</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearChannelComponents</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>clearChannelComponents</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qt3danimation-qchannel.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QChannelComponent</name>
        <filename>qt3danimation-qchannelcomponent.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChannelComponent</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>QChannelComponent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChannelComponent</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>QChannelComponent-1</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChannelComponent</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>QChannelComponent-2</anchor>
            <arglist>(const QChannelComponent &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChannelComponent &amp;</type>
            <name>operator=</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QChannelComponent &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QChannelComponent</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>dtor.QChannelComponent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keyFrameCount</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>keyFrameCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendKeyFrame</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>appendKeyFrame</anchor>
            <arglist>(const QKeyFrame &amp;kf)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertKeyFrame</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>insertKeyFrame</anchor>
            <arglist>(int index, const QKeyFrame &amp;kf)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeKeyFrame</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>removeKeyFrame</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearKeyFrames</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>clearKeyFrames</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qt3danimation-qchannelcomponent.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QChannelMapper</name>
        <filename>qt3danimation-qchannelmapper.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChannelMapper</name>
            <anchorfile>qt3danimation-qchannelmapper.html</anchorfile>
            <anchor>QChannelMapper</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QChannelMapper</name>
            <anchorfile>qt3danimation-qchannelmapper.html</anchorfile>
            <anchor>dtor.QChannelMapper</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMapping</name>
            <anchorfile>qt3danimation-qchannelmapper.html</anchorfile>
            <anchor>addMapping</anchor>
            <arglist>(QChannelMapping *mapping)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMapping</name>
            <anchorfile>qt3danimation-qchannelmapper.html</anchorfile>
            <anchor>removeMapping</anchor>
            <arglist>(QChannelMapping *mapping)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QChannelMapping *&gt;</type>
            <name>mappings</name>
            <anchorfile>qt3danimation-qchannelmapper.html</anchorfile>
            <anchor>mappings</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QChannelMapper</name>
            <anchorfile>qt3danimation-qchannelmapper.html</anchorfile>
            <anchor>QChannelMapper-1</anchor>
            <arglist>(QChannelMapperPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QChannelMapping</name>
        <filename>qt3danimation-qchannelmapping.html</filename>
        <base>QNode</base>
        <member kind="property" type="QString">
            <name>channelName</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>channelName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DCore::QNode *">
            <name>target</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>property</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>property-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChannelMapping</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>QChannelMapping</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QChannelMapping</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>dtor.QChannelMapping</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>channelName</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>channelName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNode *</type>
            <name>target</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>property</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>property-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChannelName</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>channelName-prop</anchor>
            <arglist>(const QString &amp;channelName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DCore::QNode *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProperty</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>property-prop</anchor>
            <arglist>(const QString &amp;property)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>channelNameChanged</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>channelName-prop</anchor>
            <arglist>(QString channelName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DCore::QNode *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>propertyChanged</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>property-prop</anchor>
            <arglist>(QString property)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QChannelMapping</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>QChannelMapping-1</anchor>
            <arglist>(QChannelMappingPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QClipAnimator</name>
        <filename>qt3danimation-qclipanimator.html</filename>
        <base>QAbstractClipAnimator</base>
        <member kind="property" type="Qt3DAnimation::QAbstractAnimationClip *">
            <name>clip</name>
            <anchorfile>qt3danimation-qclipanimator.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QClipAnimator</name>
            <anchorfile>qt3danimation-qclipanimator.html</anchorfile>
            <anchor>QClipAnimator</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QClipAnimator</name>
            <anchorfile>qt3danimation-qclipanimator.html</anchorfile>
            <anchor>dtor.QClipAnimator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractAnimationClip *</type>
            <name>clip</name>
            <anchorfile>qt3danimation-qclipanimator.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClip</name>
            <anchorfile>qt3danimation-qclipanimator.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimationClip *clip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clipChanged</name>
            <anchorfile>qt3danimation-qclipanimator.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimationClip *clip)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QClipBlendNodeCreatedChangeBase</name>
        <filename>qt3danimation-qclipblendnodecreatedchangebase.html</filename>
        <base>QNodeCreatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QClipBlendNodeCreatedChangeBase</name>
            <anchorfile>qt3danimation-qclipblendnodecreatedchangebase.html</anchorfile>
            <anchor>QClipBlendNodeCreatedChangeBase</anchor>
            <arglist>(const QAbstractClipBlendNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QClipBlendNodeCreatedChangeBase</name>
            <anchorfile>qt3danimation-qclipblendnodecreatedchangebase.html</anchorfile>
            <anchor>dtor.QClipBlendNodeCreatedChangeBase</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QClipBlendNodeCreatedChange</name>
        <filename>qt3danimation-qclipblendnodecreatedchange.html</filename>
        <base>QClipBlendNodeCreatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QClipBlendNodeCreatedChange</name>
            <anchorfile>qt3danimation-qclipblendnodecreatedchange.html</anchorfile>
            <anchor>QClipBlendNodeCreatedChange</anchor>
            <arglist>(const QAbstractClipBlendNode *node)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QClipBlendValue</name>
        <filename>qt3danimation-qclipblendvalue.html</filename>
        <base>QAbstractClipBlendNode</base>
        <member kind="property" type="Qt3DAnimation::QAbstractAnimationClip *">
            <name>clip</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QClipBlendValue</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>QClipBlendValue</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QClipBlendValue</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>QClipBlendValue-1</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimationClip *clip, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QClipBlendValue</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>dtor.QClipBlendValue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractAnimationClip *</type>
            <name>clip</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClip</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimationClip *clip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clipChanged</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimationClip *clip)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QClipBlendValue</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>QClipBlendValue-2</anchor>
            <arglist>(QClipBlendValuePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QKeyFrame</name>
        <filename>qt3danimation-qkeyframe.html</filename>
        <member kind="enum">
            <name>InterpolationType</name>
            <anchor>InterpolationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConstantInterpolation">
            <anchor>InterpolationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearInterpolation">
            <anchor>InterpolationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BezierInterpolation">
            <anchor>InterpolationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyFrame</name>
            <anchorfile>qt3danimation-qkeyframe.html</anchorfile>
            <anchor>QKeyFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyFrame</name>
            <anchorfile>qt3danimation-qkeyframe.html</anchorfile>
            <anchor>QKeyFrame-1</anchor>
            <arglist>(QVector2D coords)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyFrame</name>
            <anchorfile>qt3danimation-qkeyframe.html</anchorfile>
            <anchor>QKeyFrame-2</anchor>
            <arglist>(QVector2D coords, QVector2D lh, QVector2D rh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoordinates</name>
            <anchorfile>qt3danimation-qkeyframe.html</anchorfile>
            <anchor>setCoordinates</anchor>
            <arglist>(QVector2D coords)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>coordinates</name>
            <anchorfile>qt3danimation-qkeyframe.html</anchorfile>
            <anchor>coordinates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeftControlPoint</name>
            <anchorfile>qt3danimation-qkeyframe.html</anchorfile>
            <anchor>setLeftControlPoint</anchor>
            <arglist>(QVector2D lh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>leftControlPoint</name>
            <anchorfile>qt3danimation-qkeyframe.html</anchorfile>
            <anchor>leftControlPoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightControlPoint</name>
            <anchorfile>qt3danimation-qkeyframe.html</anchorfile>
            <anchor>setRightControlPoint</anchor>
            <arglist>(QVector2D rh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>rightControlPoint</name>
            <anchorfile>qt3danimation-qkeyframe.html</anchorfile>
            <anchor>rightControlPoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterpolationType</name>
            <anchorfile>qt3danimation-qkeyframe.html</anchorfile>
            <anchor>setInterpolationType</anchor>
            <arglist>(InterpolationType interp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>InterpolationType</type>
            <name>interpolationType</name>
            <anchorfile>qt3danimation-qkeyframe.html</anchorfile>
            <anchor>interpolationType</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QKeyframeAnimation</name>
        <filename>qt3danimation-qkeyframeanimation.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="property" type="QVector&lt;float&gt;">
            <name>framePositions</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>framePositions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DCore::QTransform *">
            <name>target</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QEasingCurve">
            <name>easing</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>targetName</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QKeyframeAnimation::RepeatMode">
            <name>startMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>startMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QKeyframeAnimation::RepeatMode">
            <name>endMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>endMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyframeAnimation</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>QKeyframeAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="enum">
            <name>RepeatMode</name>
            <anchor>RepeatMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>RepeatMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Constant">
            <anchor>RepeatMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Repeat">
            <anchor>RepeatMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;float&gt;</type>
            <name>framePositions</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>framePositions-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DCore::QTransform *&gt;</type>
            <name>keyframeList</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>keyframeList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QTransform *</type>
            <name>target</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve</type>
            <name>easing</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>targetName</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RepeatMode</type>
            <name>startMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>startMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RepeatMode</type>
            <name>endMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>endMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeyframes</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>setKeyframes</anchor>
            <arglist>(const QVector&lt;Qt3DCore::QTransform *&gt; &amp;keyframes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addKeyframe</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>addKeyframe</anchor>
            <arglist>(Qt3DCore::QTransform *keyframe)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeKeyframe</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>removeKeyframe</anchor>
            <arglist>(Qt3DCore::QTransform *keyframe)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFramePositions</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>framePositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;positions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DCore::QTransform *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEasing</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>(const QEasingCurve &amp;easing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetName</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>startMode-prop</anchor>
            <arglist>(RepeatMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEndMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>endMode-prop</anchor>
            <arglist>(RepeatMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>framePositionsChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>framePositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;positions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DCore::QTransform *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>easingChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>(const QEasingCurve &amp;easing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetNameChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startModeChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>startMode-prop</anchor>
            <arglist>(QKeyframeAnimation::RepeatMode startMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endModeChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>endMode-prop</anchor>
            <arglist>(QKeyframeAnimation::RepeatMode endMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QLerpClipBlend</name>
        <filename>qt3danimation-qlerpclipblend.html</filename>
        <base>QAbstractClipBlendNode</base>
        <member kind="property" type="Qt3DAnimation::QAbstractClipBlendNode *">
            <name>startClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>startClip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DAnimation::QAbstractClipBlendNode *">
            <name>endClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>endClip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>blendFactor</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>blendFactor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLerpClipBlend</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>QLerpClipBlend</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLerpClipBlend</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>dtor.QLerpClipBlend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>blendFactor</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>blendFactor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractClipBlendNode *</type>
            <name>startClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>startClip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractClipBlendNode *</type>
            <name>endClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>endClip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlendFactor</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>blendFactor-prop</anchor>
            <arglist>(float blendFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>startClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *startClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEndClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>endClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *endClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blendFactorChanged</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>blendFactor-prop</anchor>
            <arglist>(float blendFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startClipChanged</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>startClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *startClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endClipChanged</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>endClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *endClip)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QLerpClipBlend</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>QLerpClipBlend-1</anchor>
            <arglist>(QLerpClipBlendPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QMorphingAnimation</name>
        <filename>qt3danimation-qmorphinganimation.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="property" type="QVector&lt;float&gt;">
            <name>targetPositions</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>interpolator</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QGeometryRenderer *">
            <name>target</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>targetName</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMorphingAnimation::Method">
            <name>method</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>method-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QEasingCurve">
            <name>easing</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Method</name>
            <anchor>Method-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Normalized">
            <anchor>Method-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Relative">
            <anchor>Method-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMorphingAnimation</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>QMorphingAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;float&gt;</type>
            <name>targetPositions</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>interpolator</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QGeometryRenderer *</type>
            <name>target</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>targetName</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMorphingAnimation::Method</type>
            <name>method</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>method-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve</type>
            <name>easing</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMorphTargets</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>setMorphTargets</anchor>
            <arglist>(const QVector&lt;Qt3DAnimation::QMorphTarget *&gt; &amp;targets)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMorphTarget</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>addMorphTarget</anchor>
            <arglist>(Qt3DAnimation::QMorphTarget *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMorphTarget</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>removeMorphTarget</anchor>
            <arglist>(Qt3DAnimation::QMorphTarget *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWeights</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>setWeights</anchor>
            <arglist>(int positionIndex, const QVector&lt;float&gt; &amp;weights)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;float&gt;</type>
            <name>getWeights</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>getWeights</anchor>
            <arglist>(int positionIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DAnimation::QMorphTarget *&gt;</type>
            <name>morphTargetList</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>morphTargetList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetPositions</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;targetPositions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DRender::QGeometryRenderer *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetName</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMethod</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>method-prop</anchor>
            <arglist>(QMorphingAnimation::Method method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEasing</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>(const QEasingCurve &amp;easing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetPositionsChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;targetPositions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>interpolatorChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>(float interpolator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DRender::QGeometryRenderer *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetNameChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>methodChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>method-prop</anchor>
            <arglist>(QMorphingAnimation::Method method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>easingChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>(const QEasingCurve &amp;easing)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QMorphTarget</name>
        <filename>qt3danimation-qmorphtarget.html</filename>
        <base>QObject</base>
        <member kind="property" type="QStringList">
            <name>attributeNames</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>attributeNames-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMorphTarget</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>QMorphTarget</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QAttribute *&gt;</type>
            <name>attributeList</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>attributeList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>attributeNames</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>attributeNames-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributes</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>setAttributes</anchor>
            <arglist>(const QVector&lt;Qt3DRender::QAttribute *&gt; &amp;attributes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAttribute</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>addAttribute</anchor>
            <arglist>(Qt3DRender::QAttribute *attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAttribute</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>removeAttribute</anchor>
            <arglist>(Qt3DRender::QAttribute *attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMorphTarget *</type>
            <name>fromGeometry</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>fromGeometry</anchor>
            <arglist>(Qt3DRender::QGeometry *geometry, const QStringList &amp;attributes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>attributeNamesChanged</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>attributeNames-prop</anchor>
            <arglist>(const QStringList &amp;attributeNames)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QVertexBlendAnimation</name>
        <filename>qt3danimation-qvertexblendanimation.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="property" type="QVector&lt;float&gt;">
            <name>targetPositions</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>interpolator</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QGeometryRenderer *">
            <name>target</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>targetName</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVertexBlendAnimation</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>QVertexBlendAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;float&gt;</type>
            <name>targetPositions</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>interpolator</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QGeometryRenderer *</type>
            <name>target</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>targetName</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMorphTargets</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>setMorphTargets</anchor>
            <arglist>(const QVector&lt;Qt3DAnimation::QMorphTarget *&gt; &amp;targets)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMorphTarget</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>addMorphTarget</anchor>
            <arglist>(Qt3DAnimation::QMorphTarget *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMorphTarget</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>removeMorphTarget</anchor>
            <arglist>(Qt3DAnimation::QMorphTarget *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DAnimation::QMorphTarget *&gt;</type>
            <name>morphTargetList</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>morphTargetList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetPositions</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;targetPositions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DRender::QGeometryRenderer *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetName</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetPositionsChanged</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;targetPositions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>interpolatorChanged</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>(float interpolator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DRender::QGeometryRenderer *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetNameChanged</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DCore</name>
        <filename>qt3dcore.html</filename>
        <member kind="typedef" type="">
            <name>QAspectJobPtr</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QAspectJobPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QBackendNodeMapperPtr</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QBackendNodeMapperPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QAbstractAspect</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterBackendType</name>
            <anchorfile>qt3dcore.html</anchorfile>
            <anchor>unregisterBackendType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QEntityPtr</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>QEntityPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QAspectEngine</class>
        <class>Qt3DCore::QComponentAddedChange</class>
        <member kind="typedef" type="">
            <name>QComponentAddedChangePtr</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>QComponentAddedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QComponentRemovedChange</class>
        <member kind="typedef" type="">
            <name>QComponentRemovedChangePtr</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>QComponentRemovedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QDynamicPropertyUpdatedChange</class>
        <member kind="typedef" type="">
            <name>QDynamicPropertyUpdatedChangePtr</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>QDynamicPropertyUpdatedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QNodeCreatedChangeBase</class>
        <member kind="typedef" type="">
            <name>QNodeCreatedChangeBasePtr</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>QNodeCreatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QNodeCreatedChange</class>
        <class>Qt3DCore::QNodeDestroyedChange</class>
        <member kind="typedef" type="">
            <name>QNodeDestroyedChangePtr</name>
            <anchorfile>qt3dcore-qnodedestroyedchange.html</anchorfile>
            <anchor>QNodeDestroyedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyNodeAddedChange</class>
        <member kind="typedef" type="">
            <name>QPropertyNodeAddedChangePtr</name>
            <anchorfile>qt3dcore-qpropertynodeaddedchange.html</anchorfile>
            <anchor>QPropertyNodeAddedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyNodeRemovedChange</class>
        <member kind="typedef" type="">
            <name>QPropertyNodeRemovedChangePtr</name>
            <anchorfile>qt3dcore-qpropertynoderemovedchange.html</anchorfile>
            <anchor>QPropertyNodeRemovedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyUpdatedChange</class>
        <member kind="typedef" type="">
            <name>QPropertyUpdatedChangePtr</name>
            <anchorfile>qt3dcore-qpropertyupdatedchange.html</anchorfile>
            <anchor>QPropertyUpdatedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyUpdatedChangeBase</class>
        <member kind="typedef" type="">
            <name>QPropertyUpdatedChangeBasePtr</name>
            <anchorfile>qt3dcore-qpropertyupdatedchangebase.html</anchorfile>
            <anchor>QPropertyUpdatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyValueAddedChange</class>
        <member kind="typedef" type="">
            <name>QPropertyValueAddedChangePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchange.html</anchorfile>
            <anchor>QPropertyValueAddedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyValueAddedChangeBase</class>
        <member kind="typedef" type="">
            <name>QPropertyValueAddedChangeBasePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>QPropertyValueAddedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyValueRemovedChange</class>
        <member kind="typedef" type="">
            <name>QPropertyValueRemovedChangePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchange.html</anchorfile>
            <anchor>QPropertyValueRemovedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyValueRemovedChangeBase</class>
        <member kind="typedef" type="">
            <name>QPropertyValueRemovedChangeBasePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>QPropertyValueRemovedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ChangeFlag</name>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeCreated">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeDeleted">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyUpdated">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyValueAdded">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyValueRemoved">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ComponentAdded">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ComponentRemoved">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllChanges">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt3DCore::ChangeFlag">
            <name>ChangeFlags</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QSceneChange</class>
        <member kind="typedef" type="">
            <name>QSceneChangePtr</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>QSceneChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QStaticPropertyUpdatedChangeBase</class>
        <member kind="typedef" type="">
            <name>QStaticPropertyUpdatedChangeBasePtr</name>
            <anchorfile>qt3dcore-qstaticpropertyupdatedchangebase.html</anchorfile>
            <anchor>QStaticPropertyUpdatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QStaticPropertyValueAddedChangeBase</class>
        <class>Qt3DCore::QStaticPropertyValueRemovedChangeBase</class>
        <class>Qt3DCore::QAspectJob</class>
        <class>Qt3DCore::QBackendNodeMapper</class>
        <class>Qt3DCore::QBackendNode</class>
        <class>Qt3DCore::QComponent</class>
        <member kind="typedef" type="">
            <name>QComponentVector</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>QComponentVector-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QEntity</class>
        <member kind="typedef" type="">
            <name>QNodeVector</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>QNodeVector-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QNodePtr</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>QNodePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QNode</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>qIdForNode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>qIdForNode</anchor>
            <arglist>(QNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeIdVector</type>
            <name>qIdsForNodes</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>qIdsForNodes</anchor>
            <arglist>(const T &amp;nodes)</arglist>
        </member>
        <class>Qt3DCore::QNodeIdTypePair</class>
        <class>Qt3DCore::QNodeId</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3dcore.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug d, QNodeId id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(QNodeId id, uint seed)</arglist>
        </member>
        <class>Qt3DCore::QTransform</class>
        <namespace>Qt3DCore::Quick</namespace>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QAbstractAspect</name>
        <filename>qt3dcore-qabstractaspect.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAspect</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QAbstractAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>rootEntityId</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>rootEntityId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>registerBackendType</anchor>
            <arglist>(const QBackendNodeMapperPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>registerBackendType-1</anchor>
            <arglist>(const QMetaObject &amp;obj, const QBackendNodeMapperPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterBackendType</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>unregisterBackendType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterBackendType</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>unregisterBackendType-1</anchor>
            <arglist>(const QMetaObject &amp;)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QAspectEngine</name>
        <filename>qt3dcore-qaspectengine.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAspectEngine</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>QAspectEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAspectEngine</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>dtor.QAspectEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootEntity</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>setRootEntity</anchor>
            <arglist>(QEntityPtr root)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEntityPtr</type>
            <name>rootEntity</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>rootEntity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>registerAspect</anchor>
            <arglist>(QAbstractAspect *aspect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>registerAspect-1</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterAspect</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>unregisterAspect</anchor>
            <arglist>(QAbstractAspect *aspect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterAspect</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>unregisterAspect-1</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAbstractAspect *&gt;</type>
            <name>aspects</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>aspects</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>executeCommand</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>executeCommand</anchor>
            <arglist>(const QString &amp;command)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QComponentAddedChange</name>
        <filename>qt3dcore-qcomponentaddedchange.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponentAddedChange</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>QComponentAddedChange</anchor>
            <arglist>(const QEntity *entity, const QComponent *component)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponentAddedChange</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>QComponentAddedChange-1</anchor>
            <arglist>(const QComponent *component, const QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QComponentAddedChange</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>dtor.QComponentAddedChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>entityId</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>entityId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>componentId</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>componentId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>componentMetaObject</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>componentMetaObject</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QComponentRemovedChange</name>
        <filename>qt3dcore-qcomponentremovedchange.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponentRemovedChange</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>QComponentRemovedChange</anchor>
            <arglist>(const QEntity *entity, const QComponent *component)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponentRemovedChange</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>QComponentRemovedChange-1</anchor>
            <arglist>(const QComponent *component, const QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QComponentRemovedChange</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>dtor.QComponentRemovedChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>entityId</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>entityId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>componentId</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>componentId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>componentMetaObject</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>componentMetaObject</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QDynamicPropertyUpdatedChange</name>
        <filename>qt3dcore-qdynamicpropertyupdatedchange.html</filename>
        <base>QPropertyUpdatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDynamicPropertyUpdatedChange</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>QDynamicPropertyUpdatedChange</anchor>
            <arglist>(QNodeId subjectId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDynamicPropertyUpdatedChange</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>dtor.QDynamicPropertyUpdatedChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>propertyName</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>setPropertyName</anchor>
            <arglist>(const QByteArray &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QDynamicPropertyUpdatedChange</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>QDynamicPropertyUpdatedChange-1</anchor>
            <arglist>(QDynamicPropertyUpdatedChangePrivate &amp;dd, QNodeId subjectId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNodeCreatedChangeBase</name>
        <filename>qt3dcore-qnodecreatedchangebase.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeCreatedChangeBase</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>QNodeCreatedChangeBase</anchor>
            <arglist>(const QNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNodeCreatedChangeBase</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>dtor.QNodeCreatedChangeBase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>parentId</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>parentId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>metaObject</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>metaObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNodeEnabled</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>isNodeEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QNodeCreatedChangeBase</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>QNodeCreatedChangeBase-1</anchor>
            <arglist>(QNodeCreatedChangeBasePrivate &amp;dd, const QNode *node)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNodeCreatedChange</name>
        <filename>qt3dcore-qnodecreatedchange.html</filename>
        <base>QNodeCreatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeCreatedChange</name>
            <anchorfile>qt3dcore-qnodecreatedchange.html</anchorfile>
            <anchor>QNodeCreatedChange</anchor>
            <arglist>(const QNode *_node)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNodeDestroyedChange</name>
        <filename>qt3dcore-qnodedestroyedchange.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeDestroyedChange</name>
            <anchorfile>qt3dcore-qnodedestroyedchange.html</anchorfile>
            <anchor>QNodeDestroyedChange</anchor>
            <arglist>(const QNode *node, const QVector&lt;QNodeIdTypePair&gt; &amp;subtreeIdsAndTypes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNodeDestroyedChange</name>
            <anchorfile>qt3dcore-qnodedestroyedchange.html</anchorfile>
            <anchor>dtor.QNodeDestroyedChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QNodeIdTypePair&gt;</type>
            <name>subtreeIdsAndTypes</name>
            <anchorfile>qt3dcore-qnodedestroyedchange.html</anchorfile>
            <anchor>subtreeIdsAndTypes</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyNodeAddedChange</name>
        <filename>qt3dcore-qpropertynodeaddedchange.html</filename>
        <base>QStaticPropertyValueAddedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyNodeAddedChange</name>
            <anchorfile>qt3dcore-qpropertynodeaddedchange.html</anchorfile>
            <anchor>QPropertyNodeAddedChange</anchor>
            <arglist>(QNodeId subjectId, QNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>addedNodeId</name>
            <anchorfile>qt3dcore-qpropertynodeaddedchange.html</anchorfile>
            <anchor>addedNodeId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>metaObject</name>
            <anchorfile>qt3dcore-qpropertynodeaddedchange.html</anchorfile>
            <anchor>metaObject</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyNodeRemovedChange</name>
        <filename>qt3dcore-qpropertynoderemovedchange.html</filename>
        <base>QStaticPropertyValueRemovedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyNodeRemovedChange</name>
            <anchorfile>qt3dcore-qpropertynoderemovedchange.html</anchorfile>
            <anchor>QPropertyNodeRemovedChange</anchor>
            <arglist>(QNodeId subjectId, QNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>removedNodeId</name>
            <anchorfile>qt3dcore-qpropertynoderemovedchange.html</anchorfile>
            <anchor>removedNodeId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>metaObject</name>
            <anchorfile>qt3dcore-qpropertynoderemovedchange.html</anchorfile>
            <anchor>metaObject</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyUpdatedChange</name>
        <filename>qt3dcore-qpropertyupdatedchange.html</filename>
        <base>QStaticPropertyUpdatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyUpdatedChange</name>
            <anchorfile>qt3dcore-qpropertyupdatedchange.html</anchorfile>
            <anchor>QPropertyUpdatedChange</anchor>
            <arglist>(QNodeId subjectId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPropertyUpdatedChange</name>
            <anchorfile>qt3dcore-qpropertyupdatedchange.html</anchorfile>
            <anchor>dtor.QPropertyUpdatedChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3dcore-qpropertyupdatedchange.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3dcore-qpropertyupdatedchange.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyUpdatedChangeBase</name>
        <filename>qt3dcore-qpropertyupdatedchangebase.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPropertyUpdatedChangeBase</name>
            <anchorfile>qt3dcore-qpropertyupdatedchangebase.html</anchorfile>
            <anchor>dtor.QPropertyUpdatedChangeBase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QPropertyUpdatedChangeBase</name>
            <anchorfile>qt3dcore-qpropertyupdatedchangebase.html</anchorfile>
            <anchor>QPropertyUpdatedChangeBase</anchor>
            <arglist>(QNodeId subjectId)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QPropertyUpdatedChangeBase</name>
            <anchorfile>qt3dcore-qpropertyupdatedchangebase.html</anchorfile>
            <anchor>QPropertyUpdatedChangeBase-1</anchor>
            <arglist>(QPropertyUpdatedChangeBasePrivate &amp;dd, QNodeId subjectId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyValueAddedChange</name>
        <filename>qt3dcore-qpropertyvalueaddedchange.html</filename>
        <base>QStaticPropertyValueAddedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyValueAddedChange</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchange.html</anchorfile>
            <anchor>QPropertyValueAddedChange</anchor>
            <arglist>(QNodeId subjectId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPropertyValueAddedChange</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchange.html</anchorfile>
            <anchor>dtor.QPropertyValueAddedChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddedValue</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchange.html</anchorfile>
            <anchor>setAddedValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>addedValue</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchange.html</anchorfile>
            <anchor>addedValue</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyValueAddedChangeBase</name>
        <filename>qt3dcore-qpropertyvalueaddedchangebase.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPropertyValueAddedChangeBase</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>dtor.QPropertyValueAddedChangeBase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QPropertyValueAddedChangeBase</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>QPropertyValueAddedChangeBase</anchor>
            <arglist>(QNodeId subjectId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyValueRemovedChange</name>
        <filename>qt3dcore-qpropertyvalueremovedchange.html</filename>
        <base>QStaticPropertyValueRemovedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyValueRemovedChange</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchange.html</anchorfile>
            <anchor>QPropertyValueRemovedChange</anchor>
            <arglist>(QNodeId subjectId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPropertyValueRemovedChange</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchange.html</anchorfile>
            <anchor>dtor.QPropertyValueRemovedChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRemovedValue</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchange.html</anchorfile>
            <anchor>setRemovedValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>removedValue</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchange.html</anchorfile>
            <anchor>removedValue</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyValueRemovedChangeBase</name>
        <filename>qt3dcore-qpropertyvalueremovedchangebase.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPropertyValueRemovedChangeBase</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>dtor.QPropertyValueRemovedChangeBase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QPropertyValueRemovedChangeBase</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>QPropertyValueRemovedChangeBase</anchor>
            <arglist>(QNodeId subjectId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QSceneChange</name>
        <filename>qt3dcore-qscenechange.html</filename>
        <member kind="enum">
            <name>DeliveryFlag</name>
            <anchor>DeliveryFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackendNodes">
            <anchor>DeliveryFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nodes">
            <anchor>DeliveryFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeliverToAll">
            <anchor>DeliveryFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt3DCore::QSceneChange::DeliveryFlag">
            <name>DeliveryFlags</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>DeliveryFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSceneChange</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>dtor.QSceneChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ChangeFlag</type>
            <name>type</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeliveryFlags</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>setDeliveryFlags</anchor>
            <arglist>(DeliveryFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DeliveryFlags</type>
            <name>deliveryFlags</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>deliveryFlags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>subjectId</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>subjectId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSceneChange</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>QSceneChange</anchor>
            <arglist>(ChangeFlag type, QNodeId subjectId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QStaticPropertyUpdatedChangeBase</name>
        <filename>qt3dcore-qstaticpropertyupdatedchangebase.html</filename>
        <base>QPropertyUpdatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStaticPropertyUpdatedChangeBase</name>
            <anchorfile>qt3dcore-qstaticpropertyupdatedchangebase.html</anchorfile>
            <anchor>dtor.QStaticPropertyUpdatedChangeBase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>propertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyupdatedchangebase.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyupdatedchangebase.html</anchorfile>
            <anchor>setPropertyName</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QStaticPropertyUpdatedChangeBase</name>
            <anchorfile>qt3dcore-qstaticpropertyupdatedchangebase.html</anchorfile>
            <anchor>QStaticPropertyUpdatedChangeBase</anchor>
            <arglist>(QNodeId subjectId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QStaticPropertyValueAddedChangeBase</name>
        <filename>qt3dcore-qstaticpropertyvalueaddedchangebase.html</filename>
        <base>QPropertyValueAddedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStaticPropertyValueAddedChangeBase</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>dtor.QStaticPropertyValueAddedChangeBase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>propertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>setPropertyName</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QStaticPropertyValueAddedChangeBase</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>QStaticPropertyValueAddedChangeBase</anchor>
            <arglist>(QNodeId subjectId)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QStaticPropertyValueAddedChangeBase</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>QStaticPropertyValueAddedChangeBase-1</anchor>
            <arglist>(QStaticPropertyValueAddedChangeBasePrivate &amp;dd, QNodeId subjectId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QStaticPropertyValueRemovedChangeBase</name>
        <filename>qt3dcore-qstaticpropertyvalueremovedchangebase.html</filename>
        <base>QPropertyValueRemovedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStaticPropertyValueRemovedChangeBase</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>dtor.QStaticPropertyValueRemovedChangeBase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>propertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>setPropertyName</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QStaticPropertyValueRemovedChangeBase</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>QStaticPropertyValueRemovedChangeBase</anchor>
            <arglist>(QNodeId subjectId)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QStaticPropertyValueRemovedChangeBase</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>QStaticPropertyValueRemovedChangeBase-1</anchor>
            <arglist>(QStaticPropertyValueRemovedChangeBasePrivate &amp;dd, QNodeId subjectId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QAspectJob</name>
        <filename>qt3dcore-qaspectjob.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAspectJob</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>QAspectJob</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAspectJob</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>dtor.QAspectJob</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addDependency</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>addDependency</anchor>
            <arglist>(QWeakPointer&lt;QAspectJob&gt; dependency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeDependency</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>removeDependency</anchor>
            <arglist>(QWeakPointer&lt;QAspectJob&gt; dependency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QWeakPointer&lt;QAspectJob&gt; &gt;</type>
            <name>dependencies</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>dependencies</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>run</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QBackendNodeMapper</name>
        <filename>qt3dcore-qbackendnodemapper.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBackendNodeMapper</name>
            <anchorfile>qt3dcore-qbackendnodemapper.html</anchorfile>
            <anchor>dtor.QBackendNodeMapper</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QBackendNode *</type>
            <name>create</name>
            <anchorfile>qt3dcore-qbackendnodemapper.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QNodeCreatedChangeBasePtr &amp;change) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QBackendNode *</type>
            <name>get</name>
            <anchorfile>qt3dcore-qbackendnodemapper.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(QNodeId id) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>destroy</name>
            <anchorfile>qt3dcore-qbackendnodemapper.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>(QNodeId id) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QBackendNode</name>
        <filename>qt3dcore-qbackendnode.html</filename>
        <member kind="enum">
            <name>Mode</name>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnly">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadWrite">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBackendNode</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>QBackendNode</anchor>
            <arglist>(Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBackendNode</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>dtor.QBackendNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>peerId</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>peerId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Mode</type>
            <name>mode</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>mode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>notifyObservers</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>notifyObservers</anchor>
            <arglist>(const QSceneChangePtr &amp;e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QComponent</name>
        <filename>qt3dcore-qcomponent.html</filename>
        <base>QNode</base>
        <member kind="property" type="bool">
            <name>isShareable</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>isShareable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponent</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>QComponent</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QComponent</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>dtor.QComponent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isShareable</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>isShareable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QEntity *&gt;</type>
            <name>entities</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>entities</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShareable</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>isShareable-prop</anchor>
            <arglist>(bool isShareable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shareableChanged</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>isShareable-prop</anchor>
            <arglist>(bool isShareable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addedToEntity</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>addedToEntity</anchor>
            <arglist>(QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removedFromEntity</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>removedFromEntity</anchor>
            <arglist>(QEntity *entity)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QEntity</name>
        <filename>qt3dcore-qentity.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEntity</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>QEntity</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QEntity</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>dtor.QEntity</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QComponentVector</type>
            <name>components</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>components</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addComponent</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>addComponent</anchor>
            <arglist>(QComponent *comp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeComponent</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>removeComponent</anchor>
            <arglist>(QComponent *comp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEntity *</type>
            <name>parentEntity</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>parentEntity</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNode</name>
        <filename>qt3dcore-qnode.html</filename>
        <base>QObject</base>
        <member kind="property" type="Qt3DCore::QNode *">
            <name>parent</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="PropertyTrackingMode">
            <name>defaultPropertyTrackingMode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>defaultPropertyTrackingMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PropertyTrackingMode</name>
            <anchor>PropertyTrackingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TrackFinalValues">
            <anchor>PropertyTrackingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontTrackValues">
            <anchor>PropertyTrackingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TrackAllValues">
            <anchor>PropertyTrackingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>QNode</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>id</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNode *</type>
            <name>parentNode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>notificationsBlocked</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>notificationsBlocked</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>blockNotifications</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>blockNotifications</anchor>
            <arglist>(bool block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeVector</type>
            <name>childNodes</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>childNodes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PropertyTrackingMode</type>
            <name>defaultPropertyTrackingMode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>defaultPropertyTrackingMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyTracking</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>setPropertyTracking</anchor>
            <arglist>(const QString &amp;propertyName, PropertyTrackingMode trackMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PropertyTrackingMode</type>
            <name>propertyTracking</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>propertyTracking</anchor>
            <arglist>(const QString &amp;propertyName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearPropertyTracking</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>clearPropertyTracking</anchor>
            <arglist>(const QString &amp;propertyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearPropertyTrackings</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>clearPropertyTrackings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParent</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool isEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultPropertyTrackingMode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>defaultPropertyTrackingMode-prop</anchor>
            <arglist>(PropertyTrackingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>parentChanged</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enabledChanged</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>defaultPropertyTrackingModeChanged</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>defaultPropertyTrackingMode-prop</anchor>
            <arglist>(PropertyTrackingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nodeDestroyed</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>nodeDestroyed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>notifyObservers</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>notifyObservers</anchor>
            <arglist>(const QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;change)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNodeIdTypePair</name>
        <filename>qt3dcore-qnodeidtypepair.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeIdTypePair</name>
            <anchorfile>qt3dcore-qnodeidtypepair.html</anchorfile>
            <anchor>QNodeIdTypePair</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeIdTypePair</name>
            <anchorfile>qt3dcore-qnodeidtypepair.html</anchorfile>
            <anchor>QNodeIdTypePair-1</anchor>
            <arglist>(QNodeId _id, const QMetaObject *_type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNodeId</name>
        <filename>qt3dcore-qnodeid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeId</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>QNodeId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QNodeId</type>
            <name>createId</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>createId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(QNodeId other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QNodeId other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(QNodeId other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(QNodeId other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>id</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator bool</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QTransform</name>
        <filename>qt3dcore-qtransform.html</filename>
        <base>QComponent</base>
        <member kind="property" type="QMatrix4x4">
            <name>matrix</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>scale</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>scale3D</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQuaternion">
            <name>rotation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>translation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationX</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationY</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationZ</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>QTransform</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scale</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>scale3D</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>rotation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>translation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxisAndAngle</anchor>
            <arglist>(const QVector3D &amp;axis, float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxisAndAngle-1</anchor>
            <arglist>(float x, float y, float z, float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxesAndAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxesAndAngles</anchor>
            <arglist>(const QVector3D &amp;axis1, float angle1, const QVector3D &amp;axis2, float angle2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxesAndAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxesAndAngles-1</anchor>
            <arglist>(const QVector3D &amp;axis1, float angle1, const QVector3D &amp;axis2, float angle2, const QVector3D &amp;axis3, float angle3)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromEulerAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromEulerAngles</anchor>
            <arglist>(const QVector3D &amp;eulerAngles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromEulerAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromEulerAngles-1</anchor>
            <arglist>(float pitch, float yaw, float roll)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix4x4</type>
            <name>rotateAround</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotateAround</anchor>
            <arglist>(const QVector3D &amp;point, float angle, const QVector3D &amp;axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>matrix</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationX</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationY</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationZ</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale3D</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>(const QVector3D &amp;scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>(const QQuaternion &amp;rotation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTranslation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>(const QVector3D &amp;translation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationX</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>(float rotationX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationY</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>(float rotationY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationZ</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>(float rotationZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale3DChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>(const QVector3D &amp;scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>(const QQuaternion &amp;rotation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translationChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>(const QVector3D &amp;translation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>matrixChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationXChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>(float rotationX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationYChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>(float rotationY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationZChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>(float rotationZ)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DCore::Quick</name>
        <filename>qt3dcore-quick.html</filename>
        <class>Qt3DCore::Quick::QQmlAspectEngine</class>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::Quick::QQmlAspectEngine</name>
        <filename>qt3dcore-quick-qqmlaspectengine.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlAspectEngine</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>QQmlAspectEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlEngine *</type>
            <name>qmlEngine</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>qmlEngine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAspectEngine *</type>
            <name>aspectEngine</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>aspectEngine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>statusChanged</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneCreated</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>sceneCreated</anchor>
            <arglist>(QObject *rootObject)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DRender</name>
        <filename>qt3drender.html</filename>
        <class>Qt3DRender::ObjGeometryLoader</class>
        <class>Qt3DRender::PlyGeometryLoader</class>
        <class>Qt3DRender::StlGeometryLoader</class>
        <class>Qt3DRender::FbxGeometryLoader</class>
        <class>Qt3DRender::GLTFGeometryLoader</class>
        <namespace>Qt3DRender::AssimpHelper</namespace>
        <class>Qt3DRender::AssimpImporter</class>
        <class>Qt3DRender::GLTFImporter</class>
        <class>Qt3DRender::GLTFExporter</class>
        <namespace>Qt3DRender::Quick</namespace>
        <class>Qt3DRender::QBufferCapture</class>
        <class>Qt3DRender::QCameraSelector</class>
        <class>Qt3DRender::QClearBuffers</class>
        <class>Qt3DRender::QDispatchCompute</class>
        <class>Qt3DRender::QFrameGraphNode</class>
        <class>Qt3DRender::QFrameGraphNodeCreatedChangeBase</class>
        <member kind="typedef" type="">
            <name>QFrameGraphNodeCreatedChangeBasePtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>QFrameGraphNodeCreatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QFrameGraphNodeCreatedChange</class>
        <class>Qt3DRender::QFrustumCulling</class>
        <class>Qt3DRender::QLayerFilter</class>
        <class>Qt3DRender::QMemoryBarrier</class>
        <class>Qt3DRender::QNoDraw</class>
        <class>Qt3DRender::QRenderCaptureReply</class>
        <class>Qt3DRender::QRenderCapture</class>
        <class>Qt3DRender::QRenderPassFilter</class>
        <class>Qt3DRender::QRenderStateSet</class>
        <class>Qt3DRender::QRenderSurfaceSelector</class>
        <class>Qt3DRender::QRenderTargetSelector</class>
        <class>Qt3DRender::QSortPolicy</class>
        <class>Qt3DRender::QTechniqueFilter</class>
        <class>Qt3DRender::QViewport</class>
        <class>Qt3DRender::FunctorType</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qintptr</type>
            <name>functorTypeId</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>functorTypeId</anchor>
            <arglist>()</arglist>
        </member>
        <class>Qt3DRender::QAbstractFunctor</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>functor_cast</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>functor_cast</anchor>
            <arglist>(const QAbstractFunctor *other)</arglist>
        </member>
        <class>Qt3DRender::QCamera</class>
        <class>Qt3DRender::QCameraLens</class>
        <class>Qt3DRender::QComputeCommand</class>
        <class>Qt3DRender::QLayer</class>
        <class>Qt3DRender::QLevelOfDetail</class>
        <class>Qt3DRender::QLevelOfDetailBoundingSphere</class>
        <class>Qt3DRender::QLevelOfDetailSwitch</class>
        <class>Qt3DRender::QPickingSettings</class>
        <namespace>Qt3DRender::Render</namespace>
        <class>Qt3DRender::QRenderAspect</class>
        <class>Qt3DRender::QRenderSettings</class>
        <class>Qt3DRender::QRenderTarget</class>
        <class>Qt3DRender::QRenderTargetOutput</class>
        <member kind="typedef" type="">
            <name>QBufferPtr</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QBufferPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QAttribute</class>
        <member kind="typedef" type="">
            <name>QBufferDataGeneratorPtr</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>QBufferDataGeneratorPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QBuffer</class>
        <class>Qt3DRender::QBufferDataGenerator</class>
        <class>Qt3DRender::QGeometry</class>
        <class>Qt3DRender::QGeometryFactory</class>
        <member kind="typedef" type="">
            <name>QGeometryFactoryPtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>QGeometryFactoryPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QGeometryRenderer</class>
        <class>Qt3DRender::QMesh</class>
        <class>Qt3DRender::QSceneLoader</class>
        <class>Qt3DRender::QAbstractLight</class>
        <class>Qt3DRender::QDirectionalLight</class>
        <class>Qt3DRender::QEnvironmentLight</class>
        <class>Qt3DRender::QPointLight</class>
        <class>Qt3DRender::QSpotLight</class>
        <class>Qt3DRender::QEffect</class>
        <class>Qt3DRender::QFilterKey</class>
        <class>Qt3DRender::QGraphicsApiFilter</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGraphicsApiFilter &amp;reference, const QGraphicsApiFilter &amp;sample)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGraphicsApiFilter &amp;reference, const QGraphicsApiFilter &amp;sample)</arglist>
        </member>
        <class>Qt3DRender::QMaterial</class>
        <class>Qt3DRender::QParameter</class>
        <member kind="typedef" type="">
            <name>ParameterList</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>ParameterList-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QRenderPass</class>
        <class>Qt3DRender::PropertyReaderInterface</class>
        <member kind="typedef" type="">
            <name>PropertyReaderInterfacePtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>PropertyReaderInterfacePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QShaderData</class>
        <class>Qt3DRender::QShaderProgram</class>
        <class>Qt3DRender::QTechnique</class>
        <class>Qt3DRender::QObjectPicker</class>
        <member kind="typedef" type="">
            <name>QPickEventPtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>QPickEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QPickEvent</class>
        <class>Qt3DRender::QPickTriangleEvent</class>
        <class>Qt3DRender::QAlphaCoverage</class>
        <class>Qt3DRender::QAlphaTest</class>
        <class>Qt3DRender::QBlendEquation</class>
        <class>Qt3DRender::QBlendEquationArguments</class>
        <class>Qt3DRender::QClipPlane</class>
        <class>Qt3DRender::QColorMask</class>
        <class>Qt3DRender::QCullFace</class>
        <class>Qt3DRender::QDepthTest</class>
        <class>Qt3DRender::QDithering</class>
        <class>Qt3DRender::QFrontFace</class>
        <class>Qt3DRender::QMultiSampleAntiAliasing</class>
        <class>Qt3DRender::QNoDepthMask</class>
        <class>Qt3DRender::QPointSize</class>
        <class>Qt3DRender::QPolygonOffset</class>
        <class>Qt3DRender::QRenderState</class>
        <class>Qt3DRender::QScissorTest</class>
        <class>Qt3DRender::QSeamlessCubemap</class>
        <class>Qt3DRender::QStencilMask</class>
        <class>Qt3DRender::QStencilOperation</class>
        <class>Qt3DRender::QStencilOperationArguments</class>
        <class>Qt3DRender::QStencilTest</class>
        <class>Qt3DRender::QStencilTestArguments</class>
        <member kind="typedef" type="">
            <name>QTextureGeneratorPtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>QTextureGeneratorPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QAbstractTexture</class>
        <class>Qt3DRender::QAbstractTextureImage</class>
        <class>Qt3DRender::QPaintedTextureImage</class>
        <class>Qt3DRender::QTexture1D</class>
        <class>Qt3DRender::QTexture1DArray</class>
        <class>Qt3DRender::QTexture2D</class>
        <class>Qt3DRender::QTexture2DArray</class>
        <class>Qt3DRender::QTexture3D</class>
        <class>Qt3DRender::QTextureCubeMap</class>
        <class>Qt3DRender::QTextureCubeMapArray</class>
        <class>Qt3DRender::QTexture2DMultisample</class>
        <class>Qt3DRender::QTexture2DMultisampleArray</class>
        <class>Qt3DRender::QTextureRectangle</class>
        <class>Qt3DRender::QTextureBuffer</class>
        <class>Qt3DRender::QTextureLoader</class>
        <class>Qt3DRender::QTextureData</class>
        <member kind="typedef" type="">
            <name>QTextureDataPtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>QTextureDataPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QTextureGenerator</class>
        <class>Qt3DRender::QTextureImage</class>
        <class>Qt3DRender::QTextureImageData</class>
        <member kind="typedef" type="">
            <name>QTextureImageDataPtr</name>
            <anchorfile>qt3drender-qtextureimagedatagenerator.html</anchorfile>
            <anchor>QTextureImageDataPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QTextureImageDataGenerator</class>
        <member kind="typedef" type="">
            <name>QTextureImageDataGeneratorPtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>QTextureImageDataGeneratorPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QTextureWrapMode</class>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::ObjGeometryLoader</name>
        <filename>qt3drender-objgeometryloader.html</filename>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>doLoad</name>
            <anchorfile>qt3drender-objgeometryloader.html</anchorfile>
            <anchor>doLoad</anchor>
            <arglist>(QIODevice *ioDev, const QString &amp;subMesh)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::PlyGeometryLoader</name>
        <filename>qt3drender-plygeometryloader.html</filename>
        <member kind="enum">
            <name>DataType</name>
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int8">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uint8">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int16">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uint16">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int32">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uint32">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float32">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float64">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TypeList">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TypeUnknown">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PropertyType</name>
            <anchor>PropertyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyVertexIndex">
            <anchor>PropertyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyX">
            <anchor>PropertyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyY">
            <anchor>PropertyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyZ">
            <anchor>PropertyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyNormalX">
            <anchor>PropertyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyNormalY">
            <anchor>PropertyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyNormalZ">
            <anchor>PropertyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyTextureU">
            <anchor>PropertyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyTextureV">
            <anchor>PropertyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyUnknown">
            <anchor>PropertyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Format</name>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FormatAscii">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FormatBinaryLittleEndian">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FormatBinaryBigEndian">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FormatUnknown">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ElementType</name>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ElementVertex">
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ElementFace">
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ElementUnknown">
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::PlyGeometryLoader::Property</class>
        <class>Qt3DRender::PlyGeometryLoader::Element</class>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>doLoad</name>
            <anchorfile>qt3drender-plygeometryloader.html</anchorfile>
            <anchor>doLoad</anchor>
            <arglist>(QIODevice *ioDev, const QString &amp;subMesh)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::PlyGeometryLoader::Property</name>
        <filename>qt3drender-plygeometryloader-property.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::PlyGeometryLoader::Element</name>
        <filename>qt3drender-plygeometryloader-element.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::StlGeometryLoader</name>
        <filename>qt3drender-stlgeometryloader.html</filename>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>doLoad</name>
            <anchorfile>qt3drender-stlgeometryloader.html</anchorfile>
            <anchor>doLoad</anchor>
            <arglist>(QIODevice *ioDev, const QString &amp;subMesh)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::FbxGeometryLoader</name>
        <filename>qt3drender-fbxgeometryloader.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>FbxGeometryLoader</name>
            <anchorfile>qt3drender-fbxgeometryloader.html</anchorfile>
            <anchor>FbxGeometryLoader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~FbxGeometryLoader</name>
            <anchorfile>qt3drender-fbxgeometryloader.html</anchorfile>
            <anchor>dtor.FbxGeometryLoader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeometry *</type>
            <name>geometry</name>
            <anchorfile>qt3drender-fbxgeometryloader.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qt3drender-fbxgeometryloader.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(QIODevice *ioDev, const QString &amp;subMesh)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>recurseNodes</name>
            <anchorfile>qt3drender-fbxgeometryloader.html</anchorfile>
            <anchor>recurseNodes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>processNode</name>
            <anchorfile>qt3drender-fbxgeometryloader.html</anchorfile>
            <anchor>processNode</anchor>
            <arglist>(FbxNode *node)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>processMesh</name>
            <anchorfile>qt3drender-fbxgeometryloader.html</anchorfile>
            <anchor>processMesh</anchor>
            <arglist>(FbxMesh *mesh)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::GLTFGeometryLoader</name>
        <filename>qt3drender-gltfgeometryloader.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>GLTFGeometryLoader</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>GLTFGeometryLoader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~GLTFGeometryLoader</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>dtor.GLTFGeometryLoader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeometry *</type>
            <name>geometry</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(QIODevice *ioDev, const QString &amp;subMesh)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setBasePath</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>setBasePath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>setJSON</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>setJSON</anchor>
            <arglist>(const QJsonDocument &amp;json)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>QString</type>
            <name>standardAttributeNameFromSemantic</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>standardAttributeNameFromSemantic</anchor>
            <arglist>(const QString &amp;semantic)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>parse</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>parse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>cleanup</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>cleanup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>processJSONBuffer</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>processJSONBuffer</anchor>
            <arglist>(const QString &amp;id, const QJsonObject &amp;json)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>processJSONBufferView</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>processJSONBufferView</anchor>
            <arglist>(const QString &amp;id, const QJsonObject &amp;json)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>processJSONAccessor</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>processJSONAccessor</anchor>
            <arglist>(const QString &amp;id, const QJsonObject &amp;json)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>processJSONMesh</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>processJSONMesh</anchor>
            <arglist>(const QString &amp;id, const QJsonObject &amp;json)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>loadBufferData</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>loadBufferData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>unloadBufferData</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>unloadBufferData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>resolveLocalData</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>resolveLocalData</anchor>
            <arglist>(const QString &amp;path) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>QAttribute::VertexBaseType</type>
            <name>accessorTypeFromJSON</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>accessorTypeFromJSON</anchor>
            <arglist>(int componentType)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>uint</type>
            <name>accessorDataSizeFromJson</name>
            <anchorfile>qt3drender-gltfgeometryloader.html</anchorfile>
            <anchor>accessorDataSizeFromJson</anchor>
            <arglist>(const QString &amp;type)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DRender::AssimpHelper</name>
        <filename>qt3drender-assimphelper.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::AssimpImporter</name>
        <filename>qt3drender-assimpimporter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>AssimpImporter</name>
            <anchorfile>qt3drender-assimpimporter.html</anchorfile>
            <anchor>AssimpImporter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~AssimpImporter</name>
            <anchorfile>qt3drender-assimpimporter.html</anchorfile>
            <anchor>dtor.AssimpImporter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-assimpimporter.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFileTypeSupported</name>
            <anchorfile>qt3drender-assimpimporter.html</anchorfile>
            <anchor>isFileTypeSupported</anchor>
            <arglist>(const QUrl &amp;source) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>scene</name>
            <anchorfile>qt3drender-assimpimporter.html</anchorfile>
            <anchor>scene</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>node</name>
            <anchorfile>qt3drender-assimpimporter.html</anchorfile>
            <anchor>node</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::GLTFImporter</name>
        <filename>qt3drender-gltfimporter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>GLTFImporter</name>
            <anchorfile>qt3drender-gltfimporter.html</anchorfile>
            <anchor>GLTFImporter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~GLTFImporter</name>
            <anchorfile>qt3drender-gltfimporter.html</anchorfile>
            <anchor>dtor.GLTFImporter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBasePath</name>
            <anchorfile>qt3drender-gltfimporter.html</anchorfile>
            <anchor>setBasePath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setJSON</name>
            <anchorfile>qt3drender-gltfimporter.html</anchorfile>
            <anchor>setJSON</anchor>
            <arglist>(const QJsonDocument &amp;json)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-gltfimporter.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFileTypeSupported</name>
            <anchorfile>qt3drender-gltfimporter.html</anchorfile>
            <anchor>isFileTypeSupported</anchor>
            <arglist>(const QUrl &amp;source) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>node</name>
            <anchorfile>qt3drender-gltfimporter.html</anchorfile>
            <anchor>node</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>scene</name>
            <anchorfile>qt3drender-gltfimporter.html</anchorfile>
            <anchor>scene</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::GLTFExporter</name>
        <filename>qt3drender-gltfexporter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>GLTFExporter</name>
            <anchorfile>qt3drender-gltfexporter.html</anchorfile>
            <anchor>GLTFExporter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~GLTFExporter</name>
            <anchorfile>qt3drender-gltfexporter.html</anchorfile>
            <anchor>dtor.GLTFExporter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exportScene</name>
            <anchorfile>qt3drender-gltfexporter.html</anchorfile>
            <anchor>exportScene</anchor>
            <arglist>(Qt3DCore::QEntity *sceneRoot, const QString &amp;outDir, const QString &amp;exportName, const QVariantHash &amp;options)</arglist>
        </member>
        <class>Qt3DRender::GLTFExporter::GltfOptions</class>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::GLTFExporter::GltfOptions</name>
        <filename>qt3drender-gltfexporter-gltfoptions.html</filename>
    </compound>
    <compound kind="namespace">
        <name>Qt3DRender::Quick</name>
        <filename>qt3drender-quick.html</filename>
        <class>Qt3DRender::Quick::QScene2D</class>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::Quick::QScene2D</name>
        <filename>qt3drender-quick-qscene2d.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QRenderTargetOutput *">
            <name>output</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>output-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QScene2D::RenderPolicy">
            <name>renderPolicy</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQuickItem *">
            <name>item</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>item-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mouseEnabled</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>mouseEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>RenderPolicy</name>
            <anchor>RenderPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Continuous">
            <anchor>RenderPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SingleShot">
            <anchor>RenderPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScene2D</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>QScene2D</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderTargetOutput *</type>
            <name>output</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>output-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScene2D::RenderPolicy</type>
            <name>renderPolicy</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>item</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>item-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMouseEnabled</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>mouseEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DCore::QEntity *&gt;</type>
            <name>entities</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>entities</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addEntity</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>addEntity</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeEntity</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>removeEntity</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOutput</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>output-prop</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput *output)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderPolicy</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>(QScene2D::RenderPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItem</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>item-prop</anchor>
            <arglist>(QQuickItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMouseEnabled</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>mouseEnabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>outputChanged</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>output-prop</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput *output)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderPolicyChanged</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>(QScene2D::RenderPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemChanged</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>item-prop</anchor>
            <arglist>(QQuickItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseEnabledChanged</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>mouseEnabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBufferCapture</name>
        <filename>qt3drender-qbuffercapture.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBufferCapture</name>
            <anchorfile>qt3drender-qbuffercapture.html</anchorfile>
            <anchor>QBufferCapture</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBufferCapture</name>
            <anchorfile>qt3drender-qbuffercapture.html</anchorfile>
            <anchor>dtor.QBufferCapture</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCameraSelector</name>
        <filename>qt3drender-qcameraselector.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="Qt3DCore::QEntity *">
            <name>camera</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCameraSelector</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>QCameraSelector</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>camera</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraChanged</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCameraSelector</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>QCameraSelector-1</anchor>
            <arglist>(QCameraSelectorPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QClearBuffers</name>
        <filename>qt3drender-qclearbuffers.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="BufferType">
            <name>buffers</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>clearColor</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>clearDepthValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearDepthValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>clearStencilValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearStencilValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QRenderTargetOutput *">
            <name>colorBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>colorBuffer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QClearBuffers</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>QClearBuffers</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enum">
            <name>BufferType</name>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StencilBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthStencilBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorDepthBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorDepthStencilBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllBuffers">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt3DRender::QClearBuffers::BufferType">
            <name>BufferTypeFlags</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BufferType</type>
            <name>buffers</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>clearColor</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>clearDepthValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearDepthValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>clearStencilValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearStencilValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRenderTargetOutput *</type>
            <name>colorBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>colorBuffer-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBuffers</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist>(BufferType buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearColor</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearDepthValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearDepthValue-prop</anchor>
            <arglist>(float clearDepthValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearStencilValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearStencilValue-prop</anchor>
            <arglist>(int clearStencilValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>colorBuffer-prop</anchor>
            <arglist>(QRenderTargetOutput *buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buffersChanged</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist>(BufferType buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearColorChanged</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearDepthValueChanged</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearDepthValue-prop</anchor>
            <arglist>(float clearDepthValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearStencilValueChanged</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearStencilValue-prop</anchor>
            <arglist>(int clearStencilValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorBufferChanged</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>colorBuffer-prop</anchor>
            <arglist>(QRenderTargetOutput *buffer)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QClearBuffers</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>QClearBuffers-1</anchor>
            <arglist>(QClearBuffersPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDispatchCompute</name>
        <filename>qt3drender-qdispatchcompute.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="int">
            <name>workGroupX</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>workGroupY</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>workGroupZ</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDispatchCompute</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>QDispatchCompute</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupX</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupY</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupZ</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupX</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>(int workGroupX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupY</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>(int workGroupY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupZ</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>(int workGroupZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupXChanged</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupYChanged</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupZChanged</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrameGraphNode</name>
        <filename>qt3drender-qframegraphnode.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrameGraphNode</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>QFrameGraphNode</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFrameGraphNode *</type>
            <name>parentFrameGraphNode</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>parentFrameGraphNode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QFrameGraphNode</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>QFrameGraphNode-1</anchor>
            <arglist>(QFrameGraphNodePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual Qt3DCore::QNodeCreatedChangeBasePtr</type>
            <name>createNodeCreationChange</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>createNodeCreationChange</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrameGraphNodeCreatedChangeBase</name>
        <filename>qt3drender-qframegraphnodecreatedchangebase.html</filename>
        <base>QNodeCreatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrameGraphNodeCreatedChangeBase</name>
            <anchorfile>qt3drender-qframegraphnodecreatedchangebase.html</anchorfile>
            <anchor>QFrameGraphNodeCreatedChangeBase</anchor>
            <arglist>(const QFrameGraphNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>parentFrameGraphNodeId</name>
            <anchorfile>qt3drender-qframegraphnodecreatedchangebase.html</anchorfile>
            <anchor>parentFrameGraphNodeId</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrameGraphNodeCreatedChange</name>
        <filename>qt3drender-qframegraphnodecreatedchange.html</filename>
        <base>QFrameGraphNodeCreatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrameGraphNodeCreatedChange</name>
            <anchorfile>qt3drender-qframegraphnodecreatedchange.html</anchorfile>
            <anchor>QFrameGraphNodeCreatedChange</anchor>
            <arglist>(const QFrameGraphNode *node)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrustumCulling</name>
        <filename>qt3drender-qfrustumculling.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrustumCulling</name>
            <anchorfile>qt3drender-qfrustumculling.html</anchorfile>
            <anchor>QFrustumCulling</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLayerFilter</name>
        <filename>qt3drender-qlayerfilter.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLayerFilter</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>QLayerFilter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addLayer</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>addLayer</anchor>
            <arglist>(QLayer *layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLayer</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>removeLayer</anchor>
            <arglist>(QLayer *layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QLayer *&gt;</type>
            <name>layers</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QLayerFilter</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>QLayerFilter-1</anchor>
            <arglist>(QLayerFilterPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QMemoryBarrier</name>
        <filename>qt3drender-qmemorybarrier.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMemoryBarrier</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>QMemoryBarrier</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMemoryBarrier</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>dtor.QMemoryBarrier</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Operation</name>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VertexAttributeArray">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ElementArray">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uniform">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureFetch">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShaderImageAccess">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Command">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PixelBuffer">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureUpdate">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BufferUpdate">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameBuffer">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TransformFeedback">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AtomicCounter">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShaderStorage">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QueryBuffer">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="All">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt3DRender::QMemoryBarrier::Operation">
            <name>Operations</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Operations</type>
            <name>waitOperations</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>waitOperations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWaitOperations</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>setWaitOperations</anchor>
            <arglist>(QMemoryBarrier::Operations operations)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>waitOperationsChanged</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>waitOperationsChanged</anchor>
            <arglist>(QMemoryBarrier::Operations barrierTypes)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMemoryBarrier</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>QMemoryBarrier-1</anchor>
            <arglist>(QMemoryBarrierPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QNoDraw</name>
        <filename>qt3drender-qnodraw.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNoDraw</name>
            <anchorfile>qt3drender-qnodraw.html</anchorfile>
            <anchor>QNoDraw</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderCaptureReply</name>
        <filename>qt3drender-qrendercapturereply.html</filename>
        <base>QObject</base>
        <member kind="property" type="QImage">
            <name>image</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>image-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>captureId</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>captureId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>complete</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>complete-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>image</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>image-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>captureId</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>captureId-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isComplete</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>complete-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveImage</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>saveImage</anchor>
            <arglist>(const QString &amp;fileName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>completed</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>complete-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderCapture</name>
        <filename>qt3drender-qrendercapture.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderCapture</name>
            <anchorfile>qt3drender-qrendercapture.html</anchorfile>
            <anchor>QRenderCapture</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderCaptureReply *</type>
            <name>requestCapture</name>
            <anchorfile>qt3drender-qrendercapture.html</anchorfile>
            <anchor>requestCapture</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderPassFilter</name>
        <filename>qt3drender-qrenderpassfilter.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderPassFilter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>QRenderPassFilter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QFilterKey *&gt;</type>
            <name>matchAny</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>matchAny</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMatch</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>addMatch</anchor>
            <arglist>(QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMatch</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>removeMatch</anchor>
            <arglist>(QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderPassFilter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>QRenderPassFilter-1</anchor>
            <arglist>(QRenderPassFilterPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderStateSet</name>
        <filename>qt3drender-qrenderstateset.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderStateSet</name>
            <anchorfile>qt3drender-qrenderstateset.html</anchorfile>
            <anchor>QRenderStateSet</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRenderState</name>
            <anchorfile>qt3drender-qrenderstateset.html</anchorfile>
            <anchor>addRenderState</anchor>
            <arglist>(QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRenderState</name>
            <anchorfile>qt3drender-qrenderstateset.html</anchorfile>
            <anchor>removeRenderState</anchor>
            <arglist>(QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRenderState *&gt;</type>
            <name>renderStates</name>
            <anchorfile>qt3drender-qrenderstateset.html</anchorfile>
            <anchor>renderStates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderStateSet</name>
            <anchorfile>qt3drender-qrenderstateset.html</anchorfile>
            <anchor>QRenderStateSet-1</anchor>
            <arglist>(QRenderStateSetPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderSurfaceSelector</name>
        <filename>qt3drender-qrendersurfaceselector.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="QObject *">
            <name>surface</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surface-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>externalRenderTargetSize</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>surfacePixelRatio</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surfacePixelRatio-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderSurfaceSelector</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>QRenderSurfaceSelector</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>surface</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surface-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>externalRenderTargetSize</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>surfacePixelRatio</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surfacePixelRatio-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSurface</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>setSurface</anchor>
            <arglist>(QObject *surfaceObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSurfacePixelRatio</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surfacePixelRatio-prop</anchor>
            <arglist>(float ratio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExternalRenderTargetSize</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>setExternalRenderTargetSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>surfaceChanged</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surface-prop</anchor>
            <arglist>(QObject *surface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>externalRenderTargetSizeChanged</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>surfacePixelRatioChanged</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surfacePixelRatio-prop</anchor>
            <arglist>(float ratio)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderTargetSelector</name>
        <filename>qt3drender-qrendertargetselector.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="Qt3DRender::QRenderTarget *">
            <name>target</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderTargetSelector</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>QRenderTargetSelector</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRenderTarget *</type>
            <name>target</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOutputs</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>setOutputs</anchor>
            <arglist>(const QVector&lt;QRenderTargetOutput::AttachmentPoint&gt; &amp;buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRenderTargetOutput::AttachmentPoint&gt;</type>
            <name>outputs</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>outputs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(QRenderTarget *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(QRenderTarget *target)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderTargetSelector</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>QRenderTargetSelector-1</anchor>
            <arglist>(QRenderTargetSelectorPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSortPolicy</name>
        <filename>qt3drender-qsortpolicy.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="QVector&lt;int&gt;">
            <name>sortTypes</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSortPolicy</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>QSortPolicy</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enum">
            <name>SortType</name>
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StateChangeCost">
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackToFront">
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Material">
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;SortType&gt;</type>
            <name>sortTypes</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>sortTypesInt</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortTypes</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist>(const QVector&lt;SortType&gt; &amp;sortTypes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortTypes</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;sortTypesInt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortTypesChanged</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist>(const QVector&lt;SortType&gt; &amp;sortTypes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortTypesChanged</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;sortTypes)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSortPolicy</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>QSortPolicy-1</anchor>
            <arglist>(QSortPolicyPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTechniqueFilter</name>
        <filename>qt3drender-qtechniquefilter.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTechniqueFilter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>QTechniqueFilter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QFilterKey *&gt;</type>
            <name>matchAll</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>matchAll</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMatch</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>addMatch</anchor>
            <arglist>(QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMatch</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>removeMatch</anchor>
            <arglist>(QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTechniqueFilter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>QTechniqueFilter-1</anchor>
            <arglist>(QTechniqueFilterPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QViewport</name>
        <filename>qt3drender-qviewport.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="QRectF">
            <name>normalizedRect</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>normalizedRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>gamma</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QViewport</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>QViewport</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>normalizedRect</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>normalizedRect-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>gamma</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormalizedRect</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>normalizedRect-prop</anchor>
            <arglist>(const QRectF &amp;normalizedRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGamma</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>(float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalizedRectChanged</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>normalizedRect-prop</anchor>
            <arglist>(const QRectF &amp;normalizedRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>gammaChanged</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>(float gamma)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QViewport</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>QViewport-1</anchor>
            <arglist>(QViewportPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::FunctorType</name>
        <filename>qt3drender-functortype.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qintptr</type>
            <name>id</name>
            <anchorfile>qt3drender-functortype.html</anchorfile>
            <anchor>id</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractFunctor</name>
        <filename>qt3drender-qabstractfunctor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractFunctor</name>
            <anchorfile>qt3drender-qabstractfunctor.html</anchorfile>
            <anchor>QAbstractFunctor</anchor>
            <arglist>() = default</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractFunctor</name>
            <anchorfile>qt3drender-qabstractfunctor.html</anchorfile>
            <anchor>dtor.QAbstractFunctor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual qintptr</type>
            <name>id</name>
            <anchorfile>qt3drender-qabstractfunctor.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>functor_cast</name>
            <anchorfile>qt3drender-qabstractfunctor.html</anchorfile>
            <anchor>functor_cast</anchor>
            <arglist>(const QAbstractFunctor *other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCamera</name>
        <filename>qt3drender-qcamera.html</filename>
        <base>QEntity</base>
        <member kind="property" type="Qt3DRender::QCameraLens::ProjectionType">
            <name>projectionType</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>nearPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>farPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>fieldOfView</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>aspectRatio</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>left</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>right</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottom</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>top</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>projectionMatrix</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>exposure</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>position</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>upVector</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>viewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>viewVector</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>viewMatrix</name>
            <anchorfile>qt3drender-qcamera-obsolete.html</anchorfile>
            <anchor>viewMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCamera</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>QCamera</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="enum">
            <name>CameraTranslationOption</name>
            <anchor>CameraTranslationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TranslateViewCenter">
            <anchor>CameraTranslationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontTranslateViewCenter">
            <anchor>CameraTranslationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCameraLens *</type>
            <name>lens</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>lens</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QTransform *</type>
            <name>transform</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>tiltRotation</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>tiltRotation</anchor>
            <arglist>(float angle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>panRotation</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>panRotation</anchor>
            <arglist>(float angle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>rollRotation</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>rollRotation</anchor>
            <arglist>(float angle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>rotation</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>rotation</anchor>
            <arglist>(float angle, const QVector3D &amp;axis) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QVector3D &amp;vLocal, CameraTranslationOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translateWorld</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>translateWorld</anchor>
            <arglist>(const QVector3D &amp;vWorld, CameraTranslationOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tilt</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>tilt</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pan</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>pan</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pan</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>pan-1</anchor>
            <arglist>(float angle, const QVector3D &amp;axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>roll</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>roll</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tiltAboutViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>tiltAboutViewCenter</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>panAboutViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>panAboutViewCenter</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>panAboutViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>panAboutViewCenter-1</anchor>
            <arglist>(float angle, const QVector3D &amp;axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rollAboutViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>rollAboutViewCenter</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(const QQuaternion &amp;q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotateAboutViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>rotateAboutViewCenter</anchor>
            <arglist>(const QQuaternion &amp;q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCameraLens::ProjectionType</type>
            <name>projectionType</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>nearPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>farPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>fieldOfView</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>aspectRatio</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>left</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>right</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottom</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>top</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>exposure</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>position</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>upVector</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>viewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>viewVector</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>viewMatrix</name>
            <anchorfile>qt3drender-qcamera-obsolete.html</anchorfile>
            <anchor>viewMatrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionType</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setProjectionType</anchor>
            <arglist>(QCameraLens::ProjectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNearPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setNearPlane</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFarPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setFarPlane</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldOfView</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setFieldOfView</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectRatio</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setAspectRatio</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionMatrix</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setProjectionMatrix</anchor>
            <arglist>(const QMatrix4x4 &amp;projectionMatrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExposure</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setExposure</anchor>
            <arglist>(float exposure)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(const QVector3D &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUpVector</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setUpVector</anchor>
            <arglist>(const QVector3D &amp;upVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setViewCenter</anchor>
            <arglist>(const QVector3D &amp;viewCenter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionTypeChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>(QCameraLens::ProjectionType projectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nearPlaneChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>farPlaneChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fieldOfViewChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aspectRatioChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionMatrixChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;projectionMatrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exposureChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist>(float exposure)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(const QVector3D &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>upVectorChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>(const QVector3D &amp;upVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewCenterChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>(const QVector3D &amp;viewCenter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewVectorChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist>(const QVector3D &amp;viewVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewMatrixChanged</name>
            <anchorfile>qt3drender-qcamera-obsolete.html</anchorfile>
            <anchor>viewMatrix-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCamera</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>QCamera-1</anchor>
            <arglist>(QCameraPrivate &amp;dd, QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCameraLens</name>
        <filename>qt3drender-qcameralens.html</filename>
        <base>QComponent</base>
        <member kind="property" type="ProjectionType">
            <name>projectionType</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>nearPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>farPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>fieldOfView</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>aspectRatio</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>left</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>right</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottom</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>top</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>projectionMatrix</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>exposure</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCameraLens</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>QCameraLens</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="enum">
            <name>ProjectionType</name>
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OrthographicProjection">
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PerspectiveProjection">
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrustumProjection">
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomProjection">
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ProjectionType</type>
            <name>projectionType</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>nearPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>farPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>fieldOfView</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>aspectRatio</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>left</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>right</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottom</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>top</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrthographicProjection</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setOrthographicProjection</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrustumProjection</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setFrustumProjection</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPerspectiveProjection</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setPerspectiveProjection</anchor>
            <arglist>(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>exposure</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionType</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setProjectionType</anchor>
            <arglist>(ProjectionType projectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNearPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setNearPlane</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFarPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setFarPlane</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldOfView</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setFieldOfView</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectRatio</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setAspectRatio</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionMatrix</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setProjectionMatrix</anchor>
            <arglist>(const QMatrix4x4 &amp;projectionMatrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExposure</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setExposure</anchor>
            <arglist>(float exposure)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionTypeChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>(QCameraLens::ProjectionType projectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nearPlaneChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>farPlaneChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fieldOfViewChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aspectRatioChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionMatrixChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;projectionMatrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exposureChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist>(float exposure)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCameraLens</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>QCameraLens-1</anchor>
            <arglist>(QCameraLensPrivate &amp;dd, QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QComputeCommand</name>
        <filename>qt3drender-qcomputecommand.html</filename>
        <base>QComponent</base>
        <member kind="property" type="int">
            <name>workGroupX</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>workGroupY</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>workGroupZ</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComputeCommand</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>QComputeCommand</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupX</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupY</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupZ</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupX</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>setWorkGroupX</anchor>
            <arglist>(int workGroupX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupY</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>setWorkGroupY</anchor>
            <arglist>(int workGroupY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupZ</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>setWorkGroupZ</anchor>
            <arglist>(int workGroupZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupXChanged</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupYChanged</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupZChanged</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLayer</name>
        <filename>qt3drender-qlayer.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLayer</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>QLayer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QLayer</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>QLayer-1</anchor>
            <arglist>(QLayerPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLevelOfDetail</name>
        <filename>qt3drender-qlevelofdetail.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DRender::QCamera *">
            <name>camera</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentIndex</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ThresholdType">
            <name>thresholdType</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholdType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;qreal&gt;">
            <name>thresholds</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholds-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QLevelOfDetailBoundingSphere">
            <name>volumeOverride</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>volumeOverride-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ThresholdType</name>
            <anchor>ThresholdType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DistanceToCameraThreshold">
            <anchor>ThresholdType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProjectedScreenPixelSizeThreshold">
            <anchor>ThresholdType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLevelOfDetail</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>QLevelOfDetail</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCamera *</type>
            <name>camera</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentIndex</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ThresholdType</type>
            <name>thresholdType</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholdType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;qreal&gt;</type>
            <name>thresholds</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholds-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLevelOfDetailBoundingSphere</type>
            <name>volumeOverride</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>volumeOverride-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLevelOfDetailBoundingSphere</type>
            <name>createBoundingSphere</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>createBoundingSphere</anchor>
            <arglist>(const QVector3D &amp;center, float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>setCamera</anchor>
            <arglist>(QCamera *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>setCurrentIndex</anchor>
            <arglist>(int currentIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setThresholdType</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>setThresholdType</anchor>
            <arglist>(ThresholdType thresholdType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setThresholds</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>setThresholds</anchor>
            <arglist>(const QVector&lt;qreal&gt; &amp;thresholds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVolumeOverride</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>volumeOverride-prop</anchor>
            <arglist>(const QLevelOfDetailBoundingSphere &amp;volumeOverride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraChanged</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(QCamera *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentIndexChanged</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int currentIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>thresholdTypeChanged</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholdType-prop</anchor>
            <arglist>(ThresholdType thresholdType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>thresholdsChanged</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholds-prop</anchor>
            <arglist>(const QVector&lt;qreal&gt; &amp;thresholds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeOverrideChanged</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>volumeOverride-prop</anchor>
            <arglist>(const QLevelOfDetailBoundingSphere &amp;volumeOverride)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QLevelOfDetail</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>QLevelOfDetail-1</anchor>
            <arglist>(QLevelOfDetailPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLevelOfDetailBoundingSphere</name>
        <filename>qt3drender-qlevelofdetailboundingsphere.html</filename>
        <member kind="property" type="QVector3D">
            <name>center</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>center-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLevelOfDetailBoundingSphere</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>QLevelOfDetailBoundingSphere</anchor>
            <arglist>(QVector3D center, float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLevelOfDetailBoundingSphere</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>QLevelOfDetailBoundingSphere-1</anchor>
            <arglist>(const QLevelOfDetailBoundingSphere &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLevelOfDetailBoundingSphere</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>dtor.QLevelOfDetailBoundingSphere</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLevelOfDetailBoundingSphere &amp;</type>
            <name>operator=</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QLevelOfDetailBoundingSphere &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>center</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>center-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QLevelOfDetailBoundingSphere &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QLevelOfDetailBoundingSphere &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLevelOfDetailSwitch</name>
        <filename>qt3drender-qlevelofdetailswitch.html</filename>
        <base>QLevelOfDetail</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLevelOfDetailSwitch</name>
            <anchorfile>qt3drender-qlevelofdetailswitch.html</anchorfile>
            <anchor>QLevelOfDetailSwitch</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QLevelOfDetailSwitch</name>
            <anchorfile>qt3drender-qlevelofdetailswitch.html</anchorfile>
            <anchor>QLevelOfDetailSwitch-1</anchor>
            <arglist>(QLevelOfDetailPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPickingSettings</name>
        <filename>qt3drender-qpickingsettings.html</filename>
        <base>QNode</base>
        <member kind="property" type="PickMethod">
            <name>pickMethod</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickMethod-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="PickResultMode">
            <name>pickResultMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickResultMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="FaceOrientationPickingMode">
            <name>faceOrientationPickingMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>faceOrientationPickingMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickingSettings</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>QPickingSettings</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enum">
            <name>PickMethod</name>
            <anchor>PickMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BoundingVolumePicking">
            <anchor>PickMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TrianglePicking">
            <anchor>PickMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PickResultMode</name>
            <anchor>PickResultMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NearestPick">
            <anchor>PickResultMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllPicks">
            <anchor>PickResultMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FaceOrientationPickingMode</name>
            <anchor>FaceOrientationPickingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrontFace">
            <anchor>FaceOrientationPickingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackFace">
            <anchor>FaceOrientationPickingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrontAndBackFace">
            <anchor>FaceOrientationPickingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PickMethod</type>
            <name>pickMethod</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickMethod-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PickResultMode</type>
            <name>pickResultMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickResultMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FaceOrientationPickingMode</type>
            <name>faceOrientationPickingMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>faceOrientationPickingMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPickMethod</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickMethod-prop</anchor>
            <arglist>(PickMethod pickMethod)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPickResultMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickResultMode-prop</anchor>
            <arglist>(PickResultMode pickResultMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFaceOrientationPickingMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>faceOrientationPickingMode-prop</anchor>
            <arglist>(FaceOrientationPickingMode faceOrientationPickingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pickMethodChanged</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickMethod-prop</anchor>
            <arglist>(QPickingSettings::PickMethod pickMethod)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pickResultModeChanged</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickResultMode-prop</anchor>
            <arglist>(QPickingSettings::PickResultMode pickResult)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceOrientationPickingModeChanged</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>faceOrientationPickingMode-prop</anchor>
            <arglist>(QPickingSettings::FaceOrientationPickingMode faceOrientationPickingMode)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DRender::Render</name>
        <filename>qt3drender-render.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderAspect</name>
        <filename>qt3drender-qrenderaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="enum">
            <name>RenderType</name>
            <anchor>RenderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Synchronous">
            <anchor>RenderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Threaded">
            <anchor>RenderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderAspect</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>QRenderAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderAspect</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>QRenderAspect-1</anchor>
            <arglist>(RenderType type, QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderSettings</name>
        <filename>qt3drender-qrendersettings.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DRender::QPickingSettings *">
            <name>pickingSettings</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>pickingSettings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="RenderPolicy">
            <name>renderPolicy</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QFrameGraphNode *">
            <name>activeFrameGraph</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderSettings</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>QRenderSettings</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enum">
            <name>RenderPolicy</name>
            <anchor>RenderPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnDemand">
            <anchor>RenderPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Always">
            <anchor>RenderPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPickingSettings *</type>
            <name>pickingSettings</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>pickingSettings-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFrameGraphNode *</type>
            <name>activeFrameGraph</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RenderPolicy</type>
            <name>renderPolicy</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveFrameGraph</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist>(QFrameGraphNode *activeFrameGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderPolicy</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>(RenderPolicy renderPolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeFrameGraphChanged</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist>(QFrameGraphNode *activeFrameGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderPolicyChanged</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>(RenderPolicy renderPolicy)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderTarget</name>
        <filename>qt3drender-qrendertarget.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderTarget</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>QRenderTarget</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addOutput</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>addOutput</anchor>
            <arglist>(QRenderTargetOutput *output)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeOutput</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>removeOutput</anchor>
            <arglist>(QRenderTargetOutput *output)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRenderTargetOutput *&gt;</type>
            <name>outputs</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>outputs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderTarget</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>QRenderTarget-1</anchor>
            <arglist>(QRenderTargetPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderTargetOutput</name>
        <filename>qt3drender-qrendertargetoutput.html</filename>
        <base>QNode</base>
        <member kind="property" type="AttachmentPoint">
            <name>attachmentPoint</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>attachmentPoint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QAbstractTexture *">
            <name>texture</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>mipLevel</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>layer</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture::CubeMapFace">
            <name>face</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AttachmentPoint</name>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color0">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color1">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color2">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color3">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color4">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color5">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color6">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color7">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color8">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color9">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color10">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color11">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color12">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color13">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color14">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color15">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Depth">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Stencil">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthStencil">
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderTargetOutput</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>QRenderTargetOutput</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AttachmentPoint</type>
            <name>attachmentPoint</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>attachmentPoint-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture *</type>
            <name>texture</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipLevel</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layer</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::CubeMapFace</type>
            <name>face</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttachmentPoint</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>attachmentPoint-prop</anchor>
            <arglist>(AttachmentPoint attachmentPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(QAbstractTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevel</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayer</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFace</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>(QAbstractTexture::CubeMapFace face)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>attachmentPointChanged</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>attachmentPoint-prop</anchor>
            <arglist>(AttachmentPoint attachmentPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureChanged</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(QAbstractTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mipLevelChanged</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>(int mipLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layerChanged</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceChanged</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>(QAbstractTexture::CubeMapFace face)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderTargetOutput</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>QRenderTargetOutput-1</anchor>
            <arglist>(QRenderTargetOutputPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAttribute</name>
        <filename>qt3drender-qattribute.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QBuffer *">
            <name>buffer</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="VertexBaseType">
            <name>vertexBaseType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexBaseType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>vertexSize</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>count</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>byteStride</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>byteOffset</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>divisor</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="AttributeType">
            <name>attributeType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>defaultPositionAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultPositionAttributeName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>defaultNormalAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultNormalAttributeName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>defaultColorAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultColorAttributeName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>defaultTextureCoordinateAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultTextureCoordinateAttributeName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>defaultTangentAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultTangentAttributeName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AttributeType</name>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VertexAttribute">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndexAttribute">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DrawIndirectAttribute">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>VertexBaseType</name>
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Byte">
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsignedByte">
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Short">
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsignedShort">
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int">
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsignedInt">
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HalfFloat">
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float">
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Double">
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QAttribute</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QAttribute-1</anchor>
            <arglist>(QBuffer *buf, VertexBaseType type, uint dataSize, uint count, uint offset, uint stride, QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QAttribute-2</anchor>
            <arglist>(QBuffer *buf, const QString &amp;name, VertexBaseType type, uint dataSize, uint count, uint offset, uint stride, QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBuffer *</type>
            <name>buffer</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>VertexBaseType</type>
            <name>vertexBaseType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexBaseType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertexSize</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>count</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>byteStride</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>byteOffset</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>divisor</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AttributeType</type>
            <name>attributeType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultPositionAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultPositionAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultNormalAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultNormalAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultColorAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultColorAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultTextureCoordinateAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultTextureCoordinateAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultTangentAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultTangentAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBuffer</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>(QBuffer *buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexBaseType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexBaseType-prop</anchor>
            <arglist>(VertexBaseType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexSize</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexSize-prop</anchor>
            <arglist>(uint size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>setDataType</anchor>
            <arglist>(VertexBaseType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataSize</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>setDataSize</anchor>
            <arglist>(uint size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCount</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>(uint count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setByteStride</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>(uint byteStride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setByteOffset</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>(uint byteOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDivisor</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>(uint divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>(AttributeType attributeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bufferChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>(QBuffer *buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vertexBaseTypeChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexBaseType-prop</anchor>
            <arglist>(VertexBaseType vertexBaseType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vertexSizeChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexSize-prop</anchor>
            <arglist>(uint vertexSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataTypeChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>dataTypeChanged</anchor>
            <arglist>(VertexBaseType vertexBaseType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataSizeChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>dataSizeChanged</anchor>
            <arglist>(uint vertexSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>countChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>(uint count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>byteStrideChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>(uint byteStride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>byteOffsetChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>(uint byteOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>divisorChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>(uint divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>attributeTypeChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>(AttributeType attributeType)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBuffer</name>
        <filename>qt3drender-qbuffer.html</filename>
        <base>QNode</base>
        <member kind="property" type="BufferType">
            <name>type</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="UsageType">
            <name>usage</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>syncData</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>syncData-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="AccessType">
            <name>accessType</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>accessType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BufferType</name>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VertexBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndexBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PixelPackBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PixelUnpackBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UniformBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShaderStorageBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DrawIndirectBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>UsageType</name>
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamDraw">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamRead">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamCopy">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StaticDraw">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StaticRead">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StaticCopy">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DynamicDraw">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DynamicRead">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DynamicCopy">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AccessType</name>
            <anchor>AccessType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Write">
            <anchor>AccessType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Read">
            <anchor>AccessType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadWrite">
            <anchor>AccessType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBuffer</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>QBuffer</anchor>
            <arglist>(BufferType ty, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>UsageType</type>
            <name>usage</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BufferType</type>
            <name>type</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSyncData</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>syncData-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AccessType</type>
            <name>accessType</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>accessType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataGenerator</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>setDataGenerator</anchor>
            <arglist>(const QBufferDataGeneratorPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBufferDataGeneratorPtr</type>
            <name>dataGenerator</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>dataGenerator</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateData</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>updateData</anchor>
            <arglist>(int offset, const QByteArray &amp;bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(BufferType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUsage</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist>(UsageType usage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSyncData</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>syncData-prop</anchor>
            <arglist>(bool syncData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccessType</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>accessType-prop</anchor>
            <arglist>(AccessType access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>(const QByteArray &amp;bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>typeChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(BufferType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>usageChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist>(UsageType usage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>syncDataChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>syncData-prop</anchor>
            <arglist>(bool syncData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accessTypeChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>accessType-prop</anchor>
            <arglist>(AccessType access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataAvailable</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>dataAvailable</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBufferDataGenerator</name>
        <filename>qt3drender-qbufferdatagenerator.html</filename>
        <base>QAbstractFunctor</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBufferDataGenerator</name>
            <anchorfile>qt3drender-qbufferdatagenerator.html</anchorfile>
            <anchor>dtor.QBufferDataGenerator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QByteArray</type>
            <name>operator()</name>
            <anchorfile>qt3drender-qbufferdatagenerator.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qbufferdatagenerator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QBufferDataGenerator &amp;other) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGeometry</name>
        <filename>qt3drender-qgeometry.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>boundingVolumePositionAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>boundingVolumePositionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeometry</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>QGeometry</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAttribute *&gt;</type>
            <name>attributes</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>addAttribute</anchor>
            <arglist>(Qt3DRender::QAttribute *attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>removeAttribute</anchor>
            <arglist>(Qt3DRender::QAttribute *attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>boundingVolumePositionAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>boundingVolumePositionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBoundingVolumePositionAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>boundingVolumePositionAttribute-prop</anchor>
            <arglist>(QAttribute *boundingVolumePositionAttribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>boundingVolumePositionAttributeChanged</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>boundingVolumePositionAttribute-prop</anchor>
            <arglist>(QAttribute *boundingVolumePositionAttribute)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QGeometry</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>QGeometry-1</anchor>
            <arglist>(QGeometryPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGeometryFactory</name>
        <filename>qt3drender-qgeometryfactory.html</filename>
        <base>QAbstractFunctor</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeometryFactory</name>
            <anchorfile>qt3drender-qgeometryfactory.html</anchorfile>
            <anchor>dtor.QGeometryFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeometry *</type>
            <name>operator()</name>
            <anchorfile>qt3drender-qgeometryfactory.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qgeometryfactory.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeometryFactory &amp;other) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGeometryRenderer</name>
        <filename>qt3drender-qgeometryrenderer.html</filename>
        <base>QComponent</base>
        <member kind="property" type="int">
            <name>instanceCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>vertexCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>vertexCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>indexOffset</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>firstInstance</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstInstance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>firstVertex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstVertex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>restartIndexValue</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndexValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>verticesPerPatch</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>primitiveRestartEnabled</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestartEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QGeometry *">
            <name>geometry</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="PrimitiveType">
            <name>primitiveType</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeometryRenderer</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>QGeometryRenderer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enum">
            <name>PrimitiveType</name>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Points">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lines">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineLoop">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineStrip">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Triangles">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriangleStrip">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriangleFan">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinesAdjacency">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TrianglesAdjacency">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineStripAdjacency">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriangleStripAdjacency">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Patches">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>instanceCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>vertexCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>vertexCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOffset</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexOffset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>firstInstance</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstInstance-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>firstVertex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstVertex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>restartIndexValue</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndexValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>verticesPerPatch</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>primitiveRestartEnabled</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestartEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeometry *</type>
            <name>geometry</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PrimitiveType</type>
            <name>primitiveType</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeometryFactoryPtr</type>
            <name>geometryFactory</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometryFactory</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometryFactory</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>setGeometryFactory</anchor>
            <arglist>(const QGeometryFactoryPtr &amp;factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInstanceCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist>(int instanceCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>vertexCount-prop</anchor>
            <arglist>(int vertexCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndexOffset</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexOffset-prop</anchor>
            <arglist>(int indexOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirstInstance</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstInstance-prop</anchor>
            <arglist>(int firstInstance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirstVertex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstVertex-prop</anchor>
            <arglist>(int firstVertex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRestartIndexValue</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndexValue-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticesPerPatch</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist>(int verticesPerPatch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrimitiveRestartEnabled</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestartEnabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>(QGeometry *geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrimitiveType</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist>(PrimitiveType primitiveType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>instanceCountChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist>(int instanceCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vertexCountChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>vertexCount-prop</anchor>
            <arglist>(int vertexCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>indexOffsetChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexOffset-prop</anchor>
            <arglist>(int indexOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>firstInstanceChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstInstance-prop</anchor>
            <arglist>(int firstInstance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>firstVertexChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstVertex-prop</anchor>
            <arglist>(int firstVertex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>restartIndexValueChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndexValue-prop</anchor>
            <arglist>(int restartIndexValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>verticesPerPatchChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist>(int verticesPerPatch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>primitiveRestartEnabledChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestartEnabled-prop</anchor>
            <arglist>(bool primitiveRestartEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometryChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>(QGeometry *geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>primitiveTypeChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist>(PrimitiveType primitiveType)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QGeometryRenderer</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>QGeometryRenderer-1</anchor>
            <arglist>(QGeometryRendererPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QMesh</name>
        <filename>qt3drender-qmesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>meshName</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>meshName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMesh</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>QMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>meshName</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>meshName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMeshName</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>meshName-prop</anchor>
            <arglist>(const QString &amp;meshName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>meshNameChanged</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>meshName-prop</anchor>
            <arglist>(const QString &amp;meshName)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMesh</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>QMesh-1</anchor>
            <arglist>(QMeshPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSceneLoader</name>
        <filename>qt3drender-qsceneloader.html</filename>
        <base>QComponent</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSceneLoader</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>QSceneLoader</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ComponentType</name>
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownComponent">
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GeometryRendererComponent">
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TransformComponent">
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaterialComponent">
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LightComponent">
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CameraLensComponent">
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>entity</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>entity</anchor>
            <arglist>(const QString &amp;entityName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>entityNames</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>entityNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QComponent *</type>
            <name>component</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>component</anchor>
            <arglist>(const QString &amp;entityName, ComponentType componentType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSceneLoader</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>QSceneLoader-1</anchor>
            <arglist>(QSceneLoaderPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractLight</name>
        <filename>qt3drender-qabstractlight.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Type">
            <name>type</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>color</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>intensity</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractLight</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>dtor.QAbstractLight</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PointLight">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionalLight">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SpotLight">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>intensity</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIntensity</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist>(float intensity)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractLight</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>QAbstractLight</anchor>
            <arglist>(QAbstractLightPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorChanged</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>intensityChanged</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist>(float intensity)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDirectionalLight</name>
        <filename>qt3drender-qdirectionallight.html</filename>
        <base>QAbstractLight</base>
        <member kind="property" type="QVector3D">
            <name>worldDirection</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>worldDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirectionalLight</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>QDirectionalLight</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>worldDirection</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>worldDirection-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorldDirection</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>worldDirection-prop</anchor>
            <arglist>(const QVector3D &amp;worldDirection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>worldDirectionChanged</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>worldDirection-prop</anchor>
            <arglist>(const QVector3D &amp;worldDirection)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QDirectionalLight</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>QDirectionalLight-1</anchor>
            <arglist>(QDirectionalLightPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QEnvironmentLight</name>
        <filename>qt3drender-qenvironmentlight.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>irradiance</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>irradiance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>specular</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEnvironmentLight</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>QEnvironmentLight</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QEnvironmentLight</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>dtor.QEnvironmentLight</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>irradiance</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>irradiance-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>specular</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIrradiance</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>irradiance-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *irradiance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *specular)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QEnvironmentLight</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>QEnvironmentLight-1</anchor>
            <arglist>(QEnvironmentLightPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>irradianceChanged</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>irradiance-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *environmentIrradiance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *environmentSpecular)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPointLight</name>
        <filename>qt3drender-qpointlight.html</filename>
        <base>QAbstractLight</base>
        <member kind="property" type="float">
            <name>constantAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>linearAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>quadraticAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointLight</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>QPointLight</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>constantAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>linearAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>quadraticAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConstantAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLinearAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuadraticAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>constantAttenuationChanged</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>(float constantAttenuation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linearAttenuationChanged</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>(float linearAttenuation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quadraticAttenuationChanged</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>(float quadraticAttenuation)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QPointLight</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>QPointLight-1</anchor>
            <arglist>(QPointLightPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSpotLight</name>
        <filename>qt3drender-qspotlight.html</filename>
        <base>QAbstractLight</base>
        <member kind="property" type="float">
            <name>constantAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>linearAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>quadraticAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>localDirection</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>localDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>cutOffAngle</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpotLight</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>QSpotLight</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>attenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>attenuation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>localDirection</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>localDirection-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>cutOffAngle</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>constantAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>linearAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>quadraticAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConstantAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLinearAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuadraticAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalDirection</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>localDirection-prop</anchor>
            <arglist>(const QVector3D &amp;localDirection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCutOffAngle</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist>(float cutOffAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>constantAttenuationChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>(float constantAttenuation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linearAttenuationChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>(float linearAttenuation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quadraticAttenuationChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>(float quadraticAttenuation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>localDirectionChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>localDirection-prop</anchor>
            <arglist>(const QVector3D &amp;localDirection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cutOffAngleChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist>(float cutOffAngle)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSpotLight</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>QSpotLight-1</anchor>
            <arglist>(QSpotLightPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QEffect</name>
        <filename>qt3drender-qeffect.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEffect</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>QEffect</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QEffect</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>dtor.QEffect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTechnique</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>addTechnique</anchor>
            <arglist>(QTechnique *t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeTechnique</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>removeTechnique</anchor>
            <arglist>(QTechnique *t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QTechnique *&gt;</type>
            <name>techniques</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>techniques</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QEffect</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>QEffect-1</anchor>
            <arglist>(QEffectPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFilterKey</name>
        <filename>qt3drender-qfilterkey.html</filename>
        <base>QNode</base>
        <member kind="property" type="QVariant">
            <name>value</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFilterKey</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>QFilterKey</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFilterKey</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>dtor.QFilterKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;customType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGraphicsApiFilter</name>
        <filename>qt3drender-qgraphicsapifilter.html</filename>
        <base>QObject</base>
        <member kind="property" type="Qt3DRender::QGraphicsApiFilter::Api">
            <name>api</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QGraphicsApiFilter::OpenGLProfile">
            <name>profile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>majorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>extensions</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>vendor</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Api</name>
            <anchor>Api-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGLES">
            <anchor>Api-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGL">
            <anchor>Api-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>OpenGLProfile</name>
            <anchor>OpenGLProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoProfile">
            <anchor>OpenGLProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CoreProfile">
            <anchor>OpenGLProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompatibilityProfile">
            <anchor>OpenGLProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsApiFilter</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>QGraphicsApiFilter</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Api</type>
            <name>api</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>OpenGLProfile</type>
            <name>profile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>majorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>extensions</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>vendor</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setApi</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist>(Api api)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProfile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist>(OpenGLProfile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist>(int minorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMajorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist>(int majorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtensions</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist>(const QStringList &amp;extensions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVendor</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist>(const QString &amp;vendor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>apiChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist>(Qt3DRender::QGraphicsApiFilter::Api api)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>profileChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist>(Qt3DRender::QGraphicsApiFilter::OpenGLProfile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minorVersionChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist>(int minorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>majorVersionChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist>(int majorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>extensionsChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist>(const QStringList &amp;extensions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vendorChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist>(const QString &amp;vendor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>graphicsApiFilterChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>graphicsApiFilterChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QMaterial</name>
        <filename>qt3drender-qmaterial.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DRender::QEffect *">
            <name>effect</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>effect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMaterial</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>QMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMaterial</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>dtor.QMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEffect *</type>
            <name>effect</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>effect-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEffect</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>effect-prop</anchor>
            <arglist>(QEffect *effect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>effectChanged</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>effect-prop</anchor>
            <arglist>(QEffect *effect)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMaterial</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>QMaterial-1</anchor>
            <arglist>(QMaterialPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QParameter</name>
        <filename>qt3drender-qparameter.html</filename>
        <base>QNode</base>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>value</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>QParameter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>QParameter-1</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>QParameter-2</anchor>
            <arglist>(const QString &amp;name, QAbstractTexture *texture, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;dv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>QParameter-3</anchor>
            <arglist>(QParameterPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderPass</name>
        <filename>qt3drender-qrenderpass.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QShaderProgram *">
            <name>shaderProgram</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderPass</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>QRenderPass</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QShaderProgram *</type>
            <name>shaderProgram</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addFilterKey</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>addFilterKey</anchor>
            <arglist>(QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFilterKey</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>removeFilterKey</anchor>
            <arglist>(QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QFilterKey *&gt;</type>
            <name>filterKeys</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>filterKeys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRenderState</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>addRenderState</anchor>
            <arglist>(QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRenderState</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>removeRenderState</anchor>
            <arglist>(QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRenderState *&gt;</type>
            <name>renderStates</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>renderStates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderProgram</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>(QShaderProgram *shaderProgram)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shaderProgramChanged</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>(QShaderProgram *shaderProgram)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderPass</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>QRenderPass-1</anchor>
            <arglist>(QRenderPassPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::PropertyReaderInterface</name>
        <filename>qt3drender-propertyreaderinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~PropertyReaderInterface</name>
            <anchorfile>qt3drender-propertyreaderinterface.html</anchorfile>
            <anchor>dtor.PropertyReaderInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVariant</type>
            <name>readProperty</name>
            <anchorfile>qt3drender-propertyreaderinterface.html</anchorfile>
            <anchor>readProperty</anchor>
            <arglist>(const QVariant &amp;v) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QShaderData</name>
        <filename>qt3drender-qshaderdata.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderData</name>
            <anchorfile>qt3drender-qshaderdata.html</anchorfile>
            <anchor>QShaderData</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PropertyReaderInterfacePtr</type>
            <name>propertyReader</name>
            <anchorfile>qt3drender-qshaderdata.html</anchorfile>
            <anchor>propertyReader</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QShaderData</name>
            <anchorfile>qt3drender-qshaderdata.html</anchorfile>
            <anchor>QShaderData-1</anchor>
            <arglist>(QShaderDataPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QShaderProgram</name>
        <filename>qt3drender-qshaderprogram.html</filename>
        <base>QNode</base>
        <member kind="property" type="QByteArray">
            <name>vertexShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>tessellationControlShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>tessellationEvaluationShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>geometryShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>fragmentShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>computeShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>log</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>log-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderProgram</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>QShaderProgram</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QShaderProgram</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>dtor.QShaderProgram</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>ShaderType</name>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vertex">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fragment">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TessellationControl">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TessellationEvaluation">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Geometry">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Compute">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotReady">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>vertexShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>tessellationControlShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>tessellationEvaluationShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>geometryShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fragmentShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>computeShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>setShaderCode</anchor>
            <arglist>(ShaderType type, const QByteArray &amp;shaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>shaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>shaderCode</anchor>
            <arglist>(ShaderType type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>log</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>log-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>loadSource</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>loadSource</anchor>
            <arglist>(const QUrl &amp;sourceUrl)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;vertexShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTessellationControlShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationControlShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTessellationEvaluationShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationEvaluationShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometryShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;geometryShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFragmentShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;fragmentShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComputeShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;computeShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vertexShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;vertexShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tessellationControlShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationControlShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tessellationEvaluationShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationEvaluationShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometryShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;geometryShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fragmentShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;fragmentShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>computeShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;computeShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>logChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>log-prop</anchor>
            <arglist>(const QString &amp;log)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QShaderProgram</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>QShaderProgram-1</anchor>
            <arglist>(QShaderProgramPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTechnique</name>
        <filename>qt3drender-qtechnique.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QGraphicsApiFilter *">
            <name>graphicsApiFilter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>graphicsApiFilter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTechnique</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>QTechnique</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addFilterKey</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>addFilterKey</anchor>
            <arglist>(QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFilterKey</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>removeFilterKey</anchor>
            <arglist>(QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QFilterKey *&gt;</type>
            <name>filterKeys</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>filterKeys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRenderPass</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>addRenderPass</anchor>
            <arglist>(QRenderPass *pass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRenderPass</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>removeRenderPass</anchor>
            <arglist>(QRenderPass *pass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRenderPass *&gt;</type>
            <name>renderPasses</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>renderPasses</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsApiFilter *</type>
            <name>graphicsApiFilter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>graphicsApiFilter-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTechnique</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>QTechnique-1</anchor>
            <arglist>(QTechniquePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QObjectPicker</name>
        <filename>qt3drender-qobjectpicker.html</filename>
        <base>QComponent</base>
        <member kind="property" type="bool">
            <name>hoverEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>hoverEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>dragEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>dragEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>pressed</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>containsMouse</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObjectPicker</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>QObjectPicker</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHoverEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>isHoverEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDragEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>isDragEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsMouse</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>containsMouse</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPressed</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHoverEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>setHoverEnabled</anchor>
            <arglist>(bool hoverEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDragEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>setDragEnabled</anchor>
            <arglist>(bool dragEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(Qt3DRender::QPickEvent *pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>released</anchor>
            <arglist>(Qt3DRender::QPickEvent *pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(Qt3DRender::QPickEvent *pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moved</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>moved</anchor>
            <arglist>(Qt3DRender::QPickEvent *pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entered</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>entered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exited</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>exited</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hoverEnabledChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>hoverEnabled-prop</anchor>
            <arglist>(bool hoverEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dragEnabledChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>dragEnabled-prop</anchor>
            <arglist>(bool dragEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressedChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed-prop</anchor>
            <arglist>(bool pressed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>containsMouseChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist>(bool containsMouse)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPickEvent</name>
        <filename>qt3drender-qpickevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>position</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>distance</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>distance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>localIntersection</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>localIntersection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>worldIntersection</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>worldIntersection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QPickEvent::Buttons">
            <name>button</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>button-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttons</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>modifiers</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Buttons</name>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiddleButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Modifiers</name>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShiftModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ControlModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AltModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetaModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeypadModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickEvent</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>QPickEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickEvent</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>QPickEvent-1</anchor>
            <arglist>(const QPointF &amp;position, const QVector3D &amp;intersection, const QVector3D &amp;localIntersection, float distance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickEvent</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>QPickEvent-2</anchor>
            <arglist>(const QPointF &amp;position, const QVector3D &amp;worldIntersection, const QVector3D &amp;localIntersection, float distance, Buttons button, int buttons, int modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>isAccepted</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>setAccepted</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>position</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distance</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>distance</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>worldIntersection</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>worldIntersection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>localIntersection</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>localIntersection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Buttons</type>
            <name>button</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>button</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttons</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>modifiers</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>acceptedChanged</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPickTriangleEvent</name>
        <filename>qt3drender-qpicktriangleevent.html</filename>
        <base>QPickEvent</base>
        <member kind="property" type="uint">
            <name>triangleIndex</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>triangleIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>vertex1Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex1Index-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>vertex2Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex2Index-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>vertex3Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex3Index-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>uvw</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>uvw-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickTriangleEvent</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>QPickTriangleEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickTriangleEvent</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>QPickTriangleEvent-1</anchor>
            <arglist>(const QPointF &amp;position, const QVector3D &amp;worldIntersection, const QVector3D &amp;localIntersection, float distance, uint triangleIndex, uint vertex1Index, uint vertex2Index, uint vertex3Index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickTriangleEvent</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>QPickTriangleEvent-2</anchor>
            <arglist>(const QPointF &amp;position, const QVector3D &amp;worldIntersection, const QVector3D &amp;localIntersection, float distance, uint triangleIndex, uint vertex1Index, uint vertex2Index, uint vertex3Index, Buttons button, int buttons, int modifiers, const QVector3D &amp;uvw)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>triangleIndex</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>triangleIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertex1Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex1Index</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertex2Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex2Index</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertex3Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex3Index</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>uvw</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>uvw</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAlphaCoverage</name>
        <filename>qt3drender-qalphacoverage.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAlphaCoverage</name>
            <anchorfile>qt3drender-qalphacoverage.html</anchorfile>
            <anchor>QAlphaCoverage</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAlphaTest</name>
        <filename>qt3drender-qalphatest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="AlphaFunction">
            <name>alphaFunction</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>alphaFunction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>referenceValue</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AlphaFunction</name>
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Never">
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Always">
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Less">
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LessOrEqual">
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Equal">
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GreaterOrEqual">
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greater">
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotEqual">
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAlphaTest</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>QAlphaTest</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AlphaFunction</type>
            <name>alphaFunction</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>alphaFunction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>referenceValue</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaFunction</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>alphaFunction-prop</anchor>
            <arglist>(AlphaFunction alphaFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReferenceValue</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>(float referenceValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaFunctionChanged</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>alphaFunction-prop</anchor>
            <arglist>(AlphaFunction alphaFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>referenceValueChanged</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>(float referenceValue)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBlendEquation</name>
        <filename>qt3drender-qblendequation.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="BlendFunction">
            <name>blendFunction</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>blendFunction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BlendFunction</name>
            <anchor>BlendFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Add">
            <anchor>BlendFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Subtract">
            <anchor>BlendFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReverseSubtract">
            <anchor>BlendFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Min">
            <anchor>BlendFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Max">
            <anchor>BlendFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBlendEquation</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>QBlendEquation</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BlendFunction</type>
            <name>blendFunction</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>blendFunction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlendFunction</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>blendFunction-prop</anchor>
            <arglist>(BlendFunction blendFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blendFunctionChanged</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>blendFunction-prop</anchor>
            <arglist>(BlendFunction blendFunction)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBlendEquationArguments</name>
        <filename>qt3drender-qblendequationarguments.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="Blending">
            <name>sourceRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceRgb-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Blending">
            <name>sourceAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceAlpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Blending">
            <name>destinationRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationRgb-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Blending">
            <name>destinationAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationAlpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>bufferIndex</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>bufferIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Blending</name>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Zero">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="One">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SourceColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SourceAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Source1Alpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Source1Color">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DestinationColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DestinationAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SourceAlphaSaturate">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConstantColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConstantAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSourceColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSourceAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusDestinationAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusDestinationColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusConstantColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusConstantAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSource1Alpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSource1Color">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSource1Color0">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBlendEquationArguments</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>QBlendEquationArguments</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Blending</type>
            <name>sourceRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceRgb-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Blending</type>
            <name>destinationRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationRgb-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Blending</type>
            <name>sourceAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceAlpha-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Blending</type>
            <name>destinationAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationAlpha-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bufferIndex</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>bufferIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceRgb-prop</anchor>
            <arglist>(Blending sourceRgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationRgb-prop</anchor>
            <arglist>(Blending destinationRgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceAlpha-prop</anchor>
            <arglist>(Blending sourceAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationAlpha-prop</anchor>
            <arglist>(Blending destinationAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRgba</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>setSourceRgba</anchor>
            <arglist>(Blending sourceRgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationRgba</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>setDestinationRgba</anchor>
            <arglist>(Blending destinationRgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBufferIndex</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>bufferIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceRgbChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceRgb-prop</anchor>
            <arglist>(Blending sourceRgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceAlphaChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceAlpha-prop</anchor>
            <arglist>(Blending sourceAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationRgbChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationRgb-prop</anchor>
            <arglist>(Blending destinationRgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationAlphaChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationAlpha-prop</anchor>
            <arglist>(Blending destinationAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceRgbaChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceRgbaChanged</anchor>
            <arglist>(Blending sourceRgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationRgbaChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationRgbaChanged</anchor>
            <arglist>(Blending destinationRgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bufferIndexChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>bufferIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QBlendEquationArguments</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>QBlendEquationArguments-1</anchor>
            <arglist>(QBlendEquationArgumentsPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QClipPlane</name>
        <filename>qt3drender-qclipplane.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="int">
            <name>planeIndex</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>planeIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>normal</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>distance</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>distance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QClipPlane</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>QClipPlane</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>planeIndex</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>planeIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>normal</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distance</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>distance-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaneIndex</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>planeIndex-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormal</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(QVector3D )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistance</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>distance-prop</anchor>
            <arglist>(float )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>planeIndexChanged</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>planeIndex-prop</anchor>
            <arglist>(int planeIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(QVector3D normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>distanceChanged</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>distance-prop</anchor>
            <arglist>(float distance)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QColorMask</name>
        <filename>qt3drender-qcolormask.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="bool">
            <name>redMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>redMasked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>greenMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>greenMasked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>blueMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blueMasked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>alphaMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alphaMasked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColorMask</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>QColorMask</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRedMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>redMasked-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isGreenMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>greenMasked-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBlueMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blueMasked-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAlphaMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alphaMasked-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRedMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>redMasked-prop</anchor>
            <arglist>(bool redMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGreenMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>greenMasked-prop</anchor>
            <arglist>(bool greenMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlueMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blueMasked-prop</anchor>
            <arglist>(bool blueMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alphaMasked-prop</anchor>
            <arglist>(bool alphaMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redMaskedChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>redMasked-prop</anchor>
            <arglist>(bool redMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>greenMaskedChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>greenMasked-prop</anchor>
            <arglist>(bool greenMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blueMaskedChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blueMasked-prop</anchor>
            <arglist>(bool blueMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaMaskedChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alphaMasked-prop</anchor>
            <arglist>(bool alphaMasked)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCullFace</name>
        <filename>qt3drender-qcullface.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="CullingMode">
            <name>mode</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CullingMode</name>
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoCulling">
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Front">
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Back">
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrontAndBack">
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCullFace</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>QCullFace</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CullingMode</type>
            <name>mode</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMode</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>(CullingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modeChanged</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>(CullingMode mode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDepthTest</name>
        <filename>qt3drender-qdepthtest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="DepthFunction">
            <name>depthFunction</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>depthFunction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DepthFunction</name>
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Never">
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Always">
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Less">
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LessOrEqual">
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Equal">
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GreaterOrEqual">
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greater">
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotEqual">
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDepthTest</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>QDepthTest</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DepthFunction</type>
            <name>depthFunction</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>depthFunction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthFunction</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>depthFunction-prop</anchor>
            <arglist>(DepthFunction depthFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthFunctionChanged</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>depthFunction-prop</anchor>
            <arglist>(DepthFunction depthFunction)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDithering</name>
        <filename>qt3drender-qdithering.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDithering</name>
            <anchorfile>qt3drender-qdithering.html</anchorfile>
            <anchor>QDithering</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrontFace</name>
        <filename>qt3drender-qfrontface.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="WindingDirection">
            <name>direction</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WindingDirection</name>
            <anchor>WindingDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClockWise">
            <anchor>WindingDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CounterClockWise">
            <anchor>WindingDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrontFace</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>QFrontFace</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WindingDirection</type>
            <name>direction</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(WindingDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directionChanged</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(WindingDirection direction)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QMultiSampleAntiAliasing</name>
        <filename>qt3drender-qmultisampleantialiasing.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiSampleAntiAliasing</name>
            <anchorfile>qt3drender-qmultisampleantialiasing.html</anchorfile>
            <anchor>QMultiSampleAntiAliasing</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QNoDepthMask</name>
        <filename>qt3drender-qnodepthmask.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNoDepthMask</name>
            <anchorfile>qt3drender-qnodepthmask.html</anchorfile>
            <anchor>QNoDepthMask</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPointSize</name>
        <filename>qt3drender-qpointsize.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="SizeMode">
            <name>sizeMode</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>sizeMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>value</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SizeMode</name>
            <anchor>SizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fixed">
            <anchor>SizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Programmable">
            <anchor>SizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointSize</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>QPointSize</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SizeMode</type>
            <name>sizeMode</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>sizeMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>value</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeMode</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>sizeMode-prop</anchor>
            <arglist>(SizeMode sizeMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sizeModeChanged</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>sizeMode-prop</anchor>
            <arglist>(SizeMode sizeMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPolygonOffset</name>
        <filename>qt3drender-qpolygonoffset.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="float">
            <name>scaleFactor</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>scaleFactor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>depthSteps</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>depthSteps-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonOffset</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>QPolygonOffset</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scaleFactor</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>scaleFactor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>depthSteps</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>depthSteps-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScaleFactor</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>scaleFactor-prop</anchor>
            <arglist>(float scaleFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthSteps</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>depthSteps-prop</anchor>
            <arglist>(float depthSteps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleFactorChanged</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>scaleFactor-prop</anchor>
            <arglist>(float scaleFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthStepsChanged</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>depthSteps-prop</anchor>
            <arglist>(float depthSteps)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderState</name>
        <filename>qt3drender-qrenderstate.html</filename>
        <base>QNode</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderState</name>
            <anchorfile>qt3drender-qrenderstate.html</anchorfile>
            <anchor>QRenderState</anchor>
            <arglist>(QRenderStatePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QScissorTest</name>
        <filename>qt3drender-qscissortest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="int">
            <name>left</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>bottom</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>width</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>height</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScissorTest</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>QScissorTest</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>left</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottom</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(int left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(int left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int height)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSeamlessCubemap</name>
        <filename>qt3drender-qseamlesscubemap.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSeamlessCubemap</name>
            <anchorfile>qt3drender-qseamlesscubemap.html</anchorfile>
            <anchor>QSeamlessCubemap</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilMask</name>
        <filename>qt3drender-qstencilmask.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="uint">
            <name>frontOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontOutputMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>backOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backOutputMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStencilMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>QStencilMask</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>frontOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontOutputMask-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>backOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backOutputMask-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrontOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontOutputMask-prop</anchor>
            <arglist>(uint frontOutputMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backOutputMask-prop</anchor>
            <arglist>(uint backOutputMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frontOutputMaskChanged</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontOutputMask-prop</anchor>
            <arglist>(uint frontOutputMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backOutputMaskChanged</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backOutputMask-prop</anchor>
            <arglist>(uint backOutputMask)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilOperation</name>
        <filename>qt3drender-qstenciloperation.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="Qt3DRender::QStencilOperationArguments *">
            <name>front</name>
            <anchorfile>qt3drender-qstenciloperation.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QStencilOperationArguments *">
            <name>back</name>
            <anchorfile>qt3drender-qstenciloperation.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStencilOperation</name>
            <anchorfile>qt3drender-qstenciloperation.html</anchorfile>
            <anchor>QStencilOperation</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStencilOperationArguments *</type>
            <name>front</name>
            <anchorfile>qt3drender-qstenciloperation.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStencilOperationArguments *</type>
            <name>back</name>
            <anchorfile>qt3drender-qstenciloperation.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilOperationArguments</name>
        <filename>qt3drender-qstenciloperationarguments.html</filename>
        <base>QObject</base>
        <member kind="property" type="FaceMode">
            <name>faceMode</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Operation">
            <name>stencilTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>stencilTestFailureOperation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Operation">
            <name>depthTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>depthTestFailureOperation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Operation">
            <name>allTestsPassOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>allTestsPassOperation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FaceMode</name>
            <anchor>FaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Front">
            <anchor>FaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Back">
            <anchor>FaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrontAndBack">
            <anchor>FaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Operation</name>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Zero">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Keep">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Replace">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Increment">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Decrement">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncrementWrap">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DecrementWrap">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invert">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FaceMode</type>
            <name>faceMode</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Operation</type>
            <name>stencilTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>stencilTestFailureOperation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Operation</type>
            <name>depthTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>depthTestFailureOperation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Operation</type>
            <name>allTestsPassOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>allTestsPassOperation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>stencilTestFailureOperation-prop</anchor>
            <arglist>(Operation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>depthTestFailureOperation-prop</anchor>
            <arglist>(Operation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAllTestsPassOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>allTestsPassOperation-prop</anchor>
            <arglist>(Operation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stencilTestFailureOperationChanged</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>stencilTestFailureOperation-prop</anchor>
            <arglist>(Operation stencilFail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthTestFailureOperationChanged</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>depthTestFailureOperation-prop</anchor>
            <arglist>(Operation depthFail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allTestsPassOperationChanged</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>allTestsPassOperation-prop</anchor>
            <arglist>(Operation stencilDepthPass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceModeChanged</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>(FaceMode faceMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilTest</name>
        <filename>qt3drender-qstenciltest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="Qt3DRender::QStencilTestArguments *">
            <name>front</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QStencilTestArguments *">
            <name>back</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStencilTest</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>QStencilTest</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStencilTestArguments *</type>
            <name>front</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStencilTestArguments *</type>
            <name>back</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilTestArguments</name>
        <filename>qt3drender-qstenciltestarguments.html</filename>
        <base>QObject</base>
        <member kind="property" type="StencilFaceMode">
            <name>faceMode</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>comparisonMask</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>comparisonMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>referenceValue</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="StencilFunction">
            <name>stencilFunction</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>stencilFunction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StencilFaceMode</name>
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Front">
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Back">
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrontAndBack">
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StencilFunction</name>
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Never">
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Always">
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Less">
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LessOrEqual">
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Equal">
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GreaterOrEqual">
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greater">
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotEqual">
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>comparisonMask</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>comparisonMask-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>referenceValue</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StencilFunction</type>
            <name>stencilFunction</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>stencilFunction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StencilFaceMode</type>
            <name>faceMode</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonMask</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>comparisonMask-prop</anchor>
            <arglist>(uint comparisonMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReferenceValue</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>(int referenceValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilFunction</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>stencilFunction-prop</anchor>
            <arglist>(StencilFunction stencilFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>comparisonMaskChanged</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>comparisonMask-prop</anchor>
            <arglist>(uint comparisonMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stencilFunctionChanged</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>stencilFunction-prop</anchor>
            <arglist>(StencilFunction stencilFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>referenceValueChanged</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>(int referenceValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceModeChanged</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>(StencilFaceMode faceMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractTexture</name>
        <filename>qt3drender-qabstracttexture.html</filename>
        <base>QNode</base>
        <member kind="property" type="Target">
            <name>target</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="TextureFormat">
            <name>format</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>generateMipMaps</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>generateMipMaps-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QTextureWrapMode *">
            <name>wrapMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>wrapMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>width</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>height</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>depth</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Filter">
            <name>magnificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>magnificationFilter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Filter">
            <name>minificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>minificationFilter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>maximumAnisotropy</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>maximumAnisotropy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ComparisonFunction">
            <name>comparisonFunction</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonFunction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ComparisonMode">
            <name>comparisonMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>layers</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>layers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>samples</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>samples-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Target</name>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TargetAutomatic">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target1D">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target1DArray">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target2D">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target2DArray">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target3D">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TargetCubeMap">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TargetCubeMapArray">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target2DMultisample">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target2DMultisampleArray">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TargetRectangle">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TargetBuffer">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TextureFormat</name>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Automatic">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R8_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG8_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA8_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R16_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG16_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB16_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA16_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R8_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG8_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA8_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R16_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG16_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB16_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA16_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R8U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG8U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA8U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R16U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG16U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB16U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA16U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R32U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG32U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB32U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA32U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R8I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG8I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA8I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R16I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG16I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB16I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA16I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R32I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG32I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB32I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA32I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R16F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG16F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB16F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA16F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R32F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG32F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB32F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA32F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB9E5">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG11B10F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG3B2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R5G6B5">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB5A1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA4">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB10A2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D16">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D24">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D24S8">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D32">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D32F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D32FS8X24">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB_DXT1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA_DXT1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA_DXT3">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA_DXT5">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R_ATI1N_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R_ATI1N_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG_ATI2N_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG_ATI2N_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB_BP_UNSIGNED_FLOAT">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB_BP_SIGNED_FLOAT">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB_BP_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R11_EAC_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R11_EAC_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG11_EAC_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG11_EAC_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8_ETC2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB8_ETC2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8_PunchThrough_Alpha1_ETC2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB8_PunchThrough_Alpha1_ETC2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA8_ETC2_EAC">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB8_Alpha8_ETC2_EAC">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8_ETC1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB8">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB8_Alpha8">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB_DXT1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB_Alpha_DXT1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB_Alpha_DXT3">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB_Alpha_DXT5">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB_BP_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlphaFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBAFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LuminanceFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LuminanceAlphaFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Filter</name>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nearest">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Linear">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NearestMipMapNearest">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NearestMipMapLinear">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearMipMapNearest">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearMipMapLinear">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CubeMapFace</name>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapPositiveX">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapNegativeX">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapPositiveY">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapNegativeY">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapPositiveZ">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapNegativeZ">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllFaces">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ComparisonFunction</name>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareLessEqual">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareGreaterEqual">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareLess">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareGreater">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareEqual">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommpareNotEqual">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareAlways">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareNever">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ComparisonMode</name>
            <anchor>ComparisonMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareRefToTexture">
            <anchor>ComparisonMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareNone">
            <anchor>ComparisonMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Target</type>
            <name>target</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TextureFormat</type>
            <name>format</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>generateMipMaps</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>generateMipMaps-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTextureImage</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>addTextureImage</anchor>
            <arglist>(QAbstractTextureImage *textureImage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeTextureImage</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>removeTextureImage</anchor>
            <arglist>(QAbstractTextureImage *textureImage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAbstractTextureImage *&gt;</type>
            <name>textureImages</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>textureImages</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setWrapMode</anchor>
            <arglist>(const QTextureWrapMode &amp;wrapMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextureWrapMode *</type>
            <name>wrapMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>wrapMode-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(int w, int h, int d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Filter</type>
            <name>minificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>minificationFilter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Filter</type>
            <name>magnificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>magnificationFilter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>maximumAnisotropy</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>maximumAnisotropy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ComparisonFunction</type>
            <name>comparisonFunction</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonFunction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ComparisonMode</type>
            <name>comparisonMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layers</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>samples</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>samples</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextureGeneratorPtr</type>
            <name>dataGenerator</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>dataGenerator</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGenerateMipMaps</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setGenerateMipMaps</anchor>
            <arglist>(bool gen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setMinificationFilter</anchor>
            <arglist>(Filter f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMagnificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setMagnificationFilter</anchor>
            <arglist>(Filter f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumAnisotropy</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setMaximumAnisotropy</anchor>
            <arglist>(float anisotropy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonFunction</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setComparisonFunction</anchor>
            <arglist>(ComparisonFunction function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setComparisonMode</anchor>
            <arglist>(ComparisonMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayers</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setLayers</anchor>
            <arglist>(int layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSamples</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setSamples</anchor>
            <arglist>(int samples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>formatChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>(TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateMipMapsChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>generateMipMaps-prop</anchor>
            <arglist>(bool generateMipMaps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>magnificationFilterChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>magnificationFilter-prop</anchor>
            <arglist>(Filter magnificationFilter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minificationFilterChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>minificationFilter-prop</anchor>
            <arglist>(Filter minificationFilter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>maximumAnisotropyChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>maximumAnisotropy-prop</anchor>
            <arglist>(float maximumAnisotropy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>comparisonFunctionChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonFunction-prop</anchor>
            <arglist>(ComparisonFunction comparisonFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>comparisonModeChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonMode-prop</anchor>
            <arglist>(ComparisonMode comparisonMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layersChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>layers-prop</anchor>
            <arglist>(int layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>samplesChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>samples-prop</anchor>
            <arglist>(int samples)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTexture</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>QAbstractTexture</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTexture</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>QAbstractTexture-1</anchor>
            <arglist>(Target target, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTexture</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>QAbstractTexture-2</anchor>
            <arglist>(QAbstractTexturePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(Status status)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractTextureImage</name>
        <filename>qt3drender-qabstracttextureimage.html</filename>
        <base>QNode</base>
        <member kind="property" type="int">
            <name>mipLevel</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>layer</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture::CubeMapFace">
            <name>face</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTextureImage</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>QAbstractTextureImage</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipLevel</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layer</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::CubeMapFace</type>
            <name>face</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevel</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>setMipLevel</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayer</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>setLayer</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFace</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>setFace</anchor>
            <arglist>(QAbstractTexture::CubeMapFace face)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mipLevelChanged</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>(int mipLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layerChanged</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceChanged</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>(QAbstractTexture::CubeMapFace face)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>notifyDataGeneratorChanged</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>notifyDataGeneratorChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual QTextureImageDataGeneratorPtr</type>
            <name>dataGenerator</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>dataGenerator</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTextureImage</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>QAbstractTextureImage-1</anchor>
            <arglist>(QAbstractTextureImagePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPaintedTextureImage</name>
        <filename>qt3drender-qpaintedtextureimage.html</filename>
        <base>QAbstractTextureImage</base>
        <member kind="property" type="int">
            <name>width</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>height</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>size</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPaintedTextureImage</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>QPaintedTextureImage</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPaintedTextureImage</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>dtor.QPaintedTextureImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(QSize size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sizeChanged</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>(QSize size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture1D</name>
        <filename>qt3drender-qtexture1d.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture1D</name>
            <anchorfile>qt3drender-qtexture1d.html</anchorfile>
            <anchor>QTexture1D</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture1DArray</name>
        <filename>qt3drender-qtexture1darray.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture1DArray</name>
            <anchorfile>qt3drender-qtexture1darray.html</anchorfile>
            <anchor>QTexture1DArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2D</name>
        <filename>qt3drender-qtexture2d.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2D</name>
            <anchorfile>qt3drender-qtexture2d.html</anchorfile>
            <anchor>QTexture2D</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2DArray</name>
        <filename>qt3drender-qtexture2darray.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2DArray</name>
            <anchorfile>qt3drender-qtexture2darray.html</anchorfile>
            <anchor>QTexture2DArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture3D</name>
        <filename>qt3drender-qtexture3d.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture3D</name>
            <anchorfile>qt3drender-qtexture3d.html</anchorfile>
            <anchor>QTexture3D</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureCubeMap</name>
        <filename>qt3drender-qtexturecubemap.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureCubeMap</name>
            <anchorfile>qt3drender-qtexturecubemap.html</anchorfile>
            <anchor>QTextureCubeMap</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureCubeMapArray</name>
        <filename>qt3drender-qtexturecubemaparray.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureCubeMapArray</name>
            <anchorfile>qt3drender-qtexturecubemaparray.html</anchorfile>
            <anchor>QTextureCubeMapArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2DMultisample</name>
        <filename>qt3drender-qtexture2dmultisample.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2DMultisample</name>
            <anchorfile>qt3drender-qtexture2dmultisample.html</anchorfile>
            <anchor>QTexture2DMultisample</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2DMultisampleArray</name>
        <filename>qt3drender-qtexture2dmultisamplearray.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2DMultisampleArray</name>
            <anchorfile>qt3drender-qtexture2dmultisamplearray.html</anchorfile>
            <anchor>QTexture2DMultisampleArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureRectangle</name>
        <filename>qt3drender-qtexturerectangle.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureRectangle</name>
            <anchorfile>qt3drender-qtexturerectangle.html</anchorfile>
            <anchor>QTextureRectangle</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureBuffer</name>
        <filename>qt3drender-qtexturebuffer.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureBuffer</name>
            <anchorfile>qt3drender-qtexturebuffer.html</anchorfile>
            <anchor>QTextureBuffer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureLoader</name>
        <filename>qt3drender-qtextureloader.html</filename>
        <base>QAbstractTexture</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mirrored</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureLoader</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>QTextureLoader</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMirrored</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMirrored</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>setMirrored</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mirroredChanged</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureData</name>
        <filename>qt3drender-qtexturedata.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureData</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>QTextureData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::Target</type>
            <name>target</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setTarget</anchor>
            <arglist>(QAbstractTexture::Target target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::TextureFormat</type>
            <name>format</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(QAbstractTexture::TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layers</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayers</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setLayers</anchor>
            <arglist>(int layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAutoMipMapGenerationEnabled</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>isAutoMipMapGenerationEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoMipMapGenerationEnabled</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setAutoMipMapGenerationEnabled</anchor>
            <arglist>(bool autoMipMap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>maximumAnisotropy</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>maximumAnisotropy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumAnisotropy</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setMaximumAnisotropy</anchor>
            <arglist>(float maximumAnisotropy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::Filter</type>
            <name>minificationFilter</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>minificationFilter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinificationFilter</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setMinificationFilter</anchor>
            <arglist>(QAbstractTexture::Filter filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::Filter</type>
            <name>magnificationFilter</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>magnificationFilter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMagnificationFilter</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setMagnificationFilter</anchor>
            <arglist>(QAbstractTexture::Filter filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextureWrapMode::WrapMode</type>
            <name>wrapModeX</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>wrapModeX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapModeX</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setWrapModeX</anchor>
            <arglist>(QTextureWrapMode::WrapMode wrapModeX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextureWrapMode::WrapMode</type>
            <name>wrapModeY</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>wrapModeY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapModeY</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setWrapModeY</anchor>
            <arglist>(QTextureWrapMode::WrapMode wrapModeY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextureWrapMode::WrapMode</type>
            <name>wrapModeZ</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>wrapModeZ</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapModeZ</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setWrapModeZ</anchor>
            <arglist>(QTextureWrapMode::WrapMode wrapModeZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::ComparisonFunction</type>
            <name>comparisonFunction</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>comparisonFunction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonFunction</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setComparisonFunction</anchor>
            <arglist>(QAbstractTexture::ComparisonFunction comparisonFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::ComparisonMode</type>
            <name>comparisonMode</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>comparisonMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonMode</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setComparisonMode</anchor>
            <arglist>(QAbstractTexture::ComparisonMode comparisonMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QTextureImageDataPtr&gt;</type>
            <name>imageData</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>imageData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addImageData</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>addImageData</anchor>
            <arglist>(const QTextureImageDataPtr &amp;imageData)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureGenerator</name>
        <filename>qt3drender-qtexturegenerator.html</filename>
        <base>QAbstractFunctor</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextureGenerator</name>
            <anchorfile>qt3drender-qtexturegenerator.html</anchorfile>
            <anchor>dtor.QTextureGenerator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QTextureDataPtr</type>
            <name>operator()</name>
            <anchorfile>qt3drender-qtexturegenerator.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qtexturegenerator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTextureGenerator &amp;other) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureImage</name>
        <filename>qt3drender-qtextureimage.html</filename>
        <base>QAbstractTextureImage</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mirrored</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureImage</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>QTextureImage</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMirrored</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>isMirrored</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMirrored</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>setMirrored</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mirroredChanged</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(Status status)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureImageData</name>
        <filename>qt3drender-qtextureimagedata.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureImageData</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>QTextureImageData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextureImageData &amp;</type>
            <name>operator=</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTextureImageData &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cleanup</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>cleanup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCompressed</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>isCompressed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layers</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipLevels</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>mipLevels</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>faces</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>faces</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayers</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setLayers</anchor>
            <arglist>(int layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevels</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setMipLevels</anchor>
            <arglist>(int mipLevels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFaces</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setFaces</anchor>
            <arglist>(int faces)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::Target</type>
            <name>target</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::TextureFormat</type>
            <name>format</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::PixelFormat</type>
            <name>pixelFormat</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>pixelFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::PixelType</type>
            <name>pixelType</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>pixelType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setTarget</anchor>
            <arglist>(QOpenGLTexture::Target target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(QOpenGLTexture::TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelFormat</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setPixelFormat</anchor>
            <arglist>(QOpenGLTexture::PixelFormat pixelFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelType</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setPixelType</anchor>
            <arglist>(QOpenGLTexture::PixelType pixelType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImage</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setImage</anchor>
            <arglist>(const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;data, int blockSize, bool isCompressed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int layer, int face, int mipmapLevel) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureImageDataGenerator</name>
        <filename>qt3drender-qtextureimagedatagenerator.html</filename>
        <base>QAbstractFunctor</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextureImageDataGenerator</name>
            <anchorfile>qt3drender-qtextureimagedatagenerator.html</anchorfile>
            <anchor>dtor.QTextureImageDataGenerator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QTextureImageDataPtr</type>
            <name>operator()</name>
            <anchorfile>qt3drender-qtextureimagedatagenerator.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qtextureimagedatagenerator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTextureImageDataGenerator &amp;other) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureWrapMode</name>
        <filename>qt3drender-qtexturewrapmode.html</filename>
        <base>QObject</base>
        <member kind="property" type="WrapMode">
            <name>x</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="WrapMode">
            <name>y</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="WrapMode">
            <name>z</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WrapMode</name>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Repeat">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MirroredRepeat">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClampToEdge">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClampToBorder">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureWrapMode</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>QTextureWrapMode</anchor>
            <arglist>(WrapMode wrapMode, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureWrapMode</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>QTextureWrapMode-1</anchor>
            <arglist>(WrapMode x, WrapMode y, WrapMode z, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WrapMode</type>
            <name>x</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WrapMode</type>
            <name>y</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WrapMode</type>
            <name>z</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(WrapMode x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(WrapMode y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(WrapMode z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xChanged</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(WrapMode x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yChanged</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(WrapMode y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zChanged</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>(WrapMode z)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DExtras</name>
        <filename>qt3dextras.html</filename>
        <class>Qt3DExtras::QExtrudedTextGeometry</class>
        <class>Qt3DExtras::QExtrudedTextMesh</class>
        <class>Qt3DExtras::QDiffuseMapMaterial</class>
        <class>Qt3DExtras::QDiffuseSpecularMapMaterial</class>
        <class>Qt3DExtras::QFirstPersonCameraController</class>
        <class>Qt3DExtras::QForwardRenderer</class>
        <class>Qt3DExtras::QGoochMaterial</class>
        <class>Qt3DExtras::QMetalRoughMaterial</class>
        <class>Qt3DExtras::QMorphPhongMaterial</class>
        <class>Qt3DExtras::QNormalDiffuseMapAlphaMaterial</class>
        <class>Qt3DExtras::QNormalDiffuseMapMaterial</class>
        <class>Qt3DExtras::QNormalDiffuseSpecularMapMaterial</class>
        <class>Qt3DExtras::QOrbitCameraController</class>
        <class>Qt3DExtras::QPerVertexColorMaterial</class>
        <class>Qt3DExtras::QPhongAlphaMaterial</class>
        <class>Qt3DExtras::QPhongMaterial</class>
        <class>Qt3DExtras::QSkyboxEntity</class>
        <class>Qt3DExtras::Qt3DWindow</class>
        <class>Qt3DExtras::QTexturedMetalRoughMaterial</class>
        <class>Qt3DExtras::QTextureMaterial</class>
        <class>Qt3DExtras::QConeGeometry</class>
        <class>Qt3DExtras::QConeMesh</class>
        <class>Qt3DExtras::QCuboidGeometry</class>
        <class>Qt3DExtras::QCuboidMesh</class>
        <class>Qt3DExtras::QCylinderGeometry</class>
        <class>Qt3DExtras::QCylinderMesh</class>
        <class>Qt3DExtras::QPlaneGeometry</class>
        <class>Qt3DExtras::QPlaneMesh</class>
        <class>Qt3DExtras::QSphereGeometry</class>
        <class>Qt3DExtras::QSphereMesh</class>
        <class>Qt3DExtras::QTorusGeometry</class>
        <class>Qt3DExtras::QTorusMesh</class>
        <class>Qt3DExtras::QText2DEntity</class>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QExtrudedTextGeometry</name>
        <filename>qt3dextras-qextrudedtextgeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFont">
            <name>font</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>extrusionLength</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>extrusionLength-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExtrudedTextGeometry</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>QExtrudedTextGeometry</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>extrusionLength</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>extrusionLength-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>extrusionLength-prop</anchor>
            <arglist>(float extrusionLength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textChanged</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fontChanged</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthChanged</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>extrusionLength-prop</anchor>
            <arglist>(float extrusionLength)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QExtrudedTextGeometry</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>QExtrudedTextGeometry-1</anchor>
            <arglist>(QExtrudedTextGeometryPrivate &amp;dd, QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QExtrudedTextMesh</name>
        <filename>qt3dextras-qextrudedtextmesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFont">
            <name>font</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>depth</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExtrudedTextMesh</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>QExtrudedTextMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>depth</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>(float depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textChanged</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fontChanged</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthChanged</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>(float depth)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QDiffuseMapMaterial</name>
        <filename>qt3dextras-qdiffusemapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDiffuseMapMaterial</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>QDiffuseMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDiffuseMapMaterial</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>dtor.QDiffuseMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QDiffuseSpecularMapMaterial</name>
        <filename>qt3dextras-qdiffusespecularmapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>specular</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>QDiffuseSpecularMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>dtor.QDiffuseSpecularMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QFirstPersonCameraController</name>
        <filename>qt3dextras-qfirstpersoncameracontroller.html</filename>
        <base>QEntity</base>
        <member kind="property" type="Qt3DRender::QCamera *">
            <name>camera</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>linearSpeed</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>lookSpeed</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>acceleration</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>deceleration</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFirstPersonCameraController</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>QFirstPersonCameraController</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFirstPersonCameraController</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>dtor.QFirstPersonCameraController</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QCamera *</type>
            <name>camera</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>linearSpeed</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lookSpeed</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>acceleration</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>deceleration</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DRender::QCamera *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLinearSpeed</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>(float linearSpeed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLookSpeed</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist>(float lookSpeed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceleration</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>(float acceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeceleration</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>(float deceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraChanged</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linearSpeedChanged</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lookSpeedChanged</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accelerationChanged</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>(float acceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>decelerationChanged</name>
            <anchorfile>qt3dextras-qfirstpersoncameracontroller.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>(float deceleration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QForwardRenderer</name>
        <filename>qt3dextras-qforwardrenderer.html</filename>
        <base>QTechniqueFilter</base>
        <member kind="property" type="QObject *">
            <name>surface</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>surface-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QObject *">
            <name>window</name>
            <anchorfile>qt3dextras-qforwardrenderer-obsolete.html</anchorfile>
            <anchor>window-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>viewportRect</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>clearColor</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DCore::QEntity *">
            <name>camera</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>externalRenderTargetSize</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>frustumCulling</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>frustumCulling-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>gamma</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QForwardRenderer</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>QForwardRenderer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QForwardRenderer</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>dtor.QForwardRenderer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>viewportRect</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>clearColor</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>camera</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>surface</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>surface</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>externalRenderTargetSize</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFrustumCullingEnabled</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>frustumCulling-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>gamma</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportRect</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist>(const QRectF &amp;viewportRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearColor</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;clearColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSurface</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>setSurface</anchor>
            <arglist>(QObject *surface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExternalRenderTargetSize</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrustumCullingEnabled</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>frustumCulling-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGamma</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>(float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewportRectChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist>(const QRectF &amp;viewportRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearColorChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;clearColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>surfaceChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>surfaceChanged</anchor>
            <arglist>(QObject *surface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>externalRenderTargetSizeChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frustumCullingEnabledChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>frustumCulling-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>gammaChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>(float gamma)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QGoochMaterial</name>
        <filename>qt3dextras-qgoochmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>cool</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>warm</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>alpha</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>beta</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGoochMaterial</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>QGoochMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>cool</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>warm</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>alpha</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>beta</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCool</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist>(const QColor &amp;cool)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWarm</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist>(const QColor &amp;warm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlpha</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBeta</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist>(float beta)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>coolChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist>(const QColor &amp;cool)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>warmChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist>(const QColor &amp;warm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>betaChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist>(float beta)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QGoochMaterial</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>QGoochMaterial-1</anchor>
            <arglist>(QGoochMaterialPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QMetalRoughMaterial</name>
        <filename>qt3dextras-qmetalroughmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>baseColor</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>metalness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>roughness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMetalRoughMaterial</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>QMetalRoughMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMetalRoughMaterial</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>dtor.QMetalRoughMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>baseColor</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>metalness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>roughness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseColor</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist>(const QColor &amp;baseColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMetalness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist>(float metalness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRoughness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist>(float roughness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>baseColorChanged</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist>(const QColor &amp;baseColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metalnessChanged</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist>(float metalness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>roughnessChanged</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist>(float roughness)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMetalRoughMaterial</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>QMetalRoughMaterial-1</anchor>
            <arglist>(QMetalRoughMaterialPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QMorphPhongMaterial</name>
        <filename>qt3dextras-qmorphphongmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>interpolator</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMorphPhongMaterial</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>QMorphPhongMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMorphPhongMaterial</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>dtor.QMorphPhongMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>interpolator</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterpolator</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>(float interpolator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>interpolatorChanged</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>(float interpolator)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QNormalDiffuseMapAlphaMaterial</name>
        <filename>qt3dextras-qnormaldiffusemapalphamaterial.html</filename>
        <base>QNormalDiffuseMapMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseMapAlphaMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusemapalphamaterial.html</anchorfile>
            <anchor>QNormalDiffuseMapAlphaMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNormalDiffuseMapAlphaMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusemapalphamaterial.html</anchorfile>
            <anchor>dtor.QNormalDiffuseMapAlphaMaterial</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QNormalDiffuseMapMaterial</name>
        <filename>qt3dextras-qnormaldiffusemapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>normal</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseMapMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>QNormalDiffuseMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNormalDiffuseMapMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>dtor.QNormalDiffuseMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>normal</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormal</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseMapMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>QNormalDiffuseMapMaterial-1</anchor>
            <arglist>(QNormalDiffuseMapMaterialPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QNormalDiffuseSpecularMapMaterial</name>
        <filename>qt3dextras-qnormaldiffusespecularmapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>normal</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>specular</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>QNormalDiffuseSpecularMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNormalDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>dtor.QNormalDiffuseSpecularMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>normal</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormal</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>QNormalDiffuseSpecularMapMaterial-1</anchor>
            <arglist>(QNormalDiffuseSpecularMapMaterialPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QOrbitCameraController</name>
        <filename>qt3dextras-qorbitcameracontroller.html</filename>
        <base>QEntity</base>
        <member kind="property" type="Qt3DRender::QCamera *">
            <name>camera</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>linearSpeed</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>lookSpeed</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>zoomInLimit</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>zoomInLimit-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrbitCameraController</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>QOrbitCameraController</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrbitCameraController</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>dtor.QOrbitCameraController</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QCamera *</type>
            <name>camera</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>linearSpeed</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lookSpeed</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>zoomInLimit</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>zoomInLimit-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DRender::QCamera *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLinearSpeed</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>(float linearSpeed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLookSpeed</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist>(float lookSpeed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZoomInLimit</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>zoomInLimit-prop</anchor>
            <arglist>(float zoomInLimit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraChanged</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linearSpeedChanged</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lookSpeedChanged</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zoomInLimitChanged</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>zoomInLimit-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QPerVertexColorMaterial</name>
        <filename>qt3dextras-qpervertexcolormaterial.html</filename>
        <base>QMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPerVertexColorMaterial</name>
            <anchorfile>qt3dextras-qpervertexcolormaterial.html</anchorfile>
            <anchor>QPerVertexColorMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPerVertexColorMaterial</name>
            <anchorfile>qt3dextras-qpervertexcolormaterial.html</anchorfile>
            <anchor>dtor.QPerVertexColorMaterial</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QPhongAlphaMaterial</name>
        <filename>qt3dextras-qphongalphamaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>alpha</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QBlendEquationArguments::Blending">
            <name>sourceRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceRgbArg-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QBlendEquationArguments::Blending">
            <name>destinationRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationRgbArg-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QBlendEquationArguments::Blending">
            <name>sourceAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceAlphaArg-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QBlendEquationArguments::Blending">
            <name>destinationAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationAlphaArg-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QBlendEquation::BlendFunction">
            <name>blendFunctionArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>blendFunctionArg-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPhongAlphaMaterial</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>QPhongAlphaMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPhongAlphaMaterial</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>dtor.QPhongAlphaMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>alpha</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>sourceRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceRgbArg-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>destinationRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationRgbArg-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>sourceAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceAlphaArg-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>destinationAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationAlphaArg-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquation::BlendFunction</type>
            <name>blendFunctionArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>blendFunctionArg-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlpha</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceRgbArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceRgbArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationRgbArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationRgbArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceAlphaArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceAlphaArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationAlphaArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationAlphaArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlendFunctionArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>blendFunctionArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquation::BlendFunction blendFunctionArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceRgbArgChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceRgbArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceRgbArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationRgbArgChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationRgbArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationRgbArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceAlphaArgChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceAlphaArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceAlphaArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationAlphaArgChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationAlphaArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationAlphaArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blendFunctionArgChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>blendFunctionArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquation::BlendFunction blendFunctionArg)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QPhongMaterial</name>
        <filename>qt3dextras-qphongmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPhongMaterial</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>QPhongMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPhongMaterial</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>dtor.QPhongMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QSkyboxEntity</name>
        <filename>qt3dextras-qskyboxentity.html</filename>
        <base>QEntity</base>
        <member kind="property" type="QString">
            <name>baseName</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>baseName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>extension</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>extension-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>gammaCorrect</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>gammaCorrect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSkyboxEntity</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>QSkyboxEntity</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>baseName</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>baseName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>extension</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>extension</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isGammaCorrectEnabled</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>isGammaCorrectEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseName</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>setBaseName</anchor>
            <arglist>(const QString &amp;baseName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtension</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>setExtension</anchor>
            <arglist>(const QString &amp;extension)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGammaCorrectEnabled</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>setGammaCorrectEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>baseNameChanged</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>baseName-prop</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>extensionChanged</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>extension-prop</anchor>
            <arglist>(const QString &amp;extension)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>gammaCorrectEnabledChanged</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>gammaCorrect-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::Qt3DWindow</name>
        <filename>qt3dextras-qt3dwindow.html</filename>
        <base>QWindow</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Qt3DWindow</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>Qt3DWindow</anchor>
            <arglist>(QScreen *screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~Qt3DWindow</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>dtor.Qt3DWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>registerAspect</anchor>
            <arglist>(Qt3DCore::QAbstractAspect *aspect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>registerAspect-1</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootEntity</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>setRootEntity</anchor>
            <arglist>(Qt3DCore::QEntity *root)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveFrameGraph</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>setActiveFrameGraph</anchor>
            <arglist>(Qt3DRender::QFrameGraphNode *activeFrameGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QFrameGraphNode *</type>
            <name>activeFrameGraph</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>activeFrameGraph</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DExtras::QForwardRenderer *</type>
            <name>defaultFrameGraph</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>defaultFrameGraph</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QCamera *</type>
            <name>camera</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>camera</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderSettings *</type>
            <name>renderSettings</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>renderSettings</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qt3dextras-qt3dwindow.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QTexturedMetalRoughMaterial</name>
        <filename>qt3dextras-qtexturedmetalroughmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>baseColor</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>metalness</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>roughness</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>ambientOcclusion</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>ambientOcclusion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>normal</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexturedMetalRoughMaterial</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>QTexturedMetalRoughMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTexturedMetalRoughMaterial</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>dtor.QTexturedMetalRoughMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>baseColor</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>metalness</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>roughness</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>ambientOcclusion</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>ambientOcclusion-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>normal</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseColor</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *baseColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMetalness</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *metalness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRoughness</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *roughness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbientOcclusion</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>ambientOcclusion-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *ambientOcclusion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormal</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>baseColorChanged</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *baseColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metalnessChanged</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *metalness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>roughnessChanged</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *roughness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientOcclusionChanged</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>ambientOcclusion-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *ambientOcclusion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *normal)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTexturedMetalRoughMaterial</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>QTexturedMetalRoughMaterial-1</anchor>
            <arglist>(QTexturedMetalRoughMaterialPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QTextureMaterial</name>
        <filename>qt3dextras-qtexturematerial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="Qt3DRender::QAbstractTexture *">
            <name>texture</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector2D">
            <name>textureOffset</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureMaterial</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>QTextureMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextureMaterial</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>dtor.QTextureMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>texture</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>textureOffset</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureOffset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureOffset</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureOffset-prop</anchor>
            <arglist>(QVector2D textureOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureChanged</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureOffsetChanged</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureOffset-prop</anchor>
            <arglist>(QVector2D textureOffset)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QConeGeometry</name>
        <filename>qt3dextras-qconegeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="bool">
            <name>hasTopEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>hasBottomEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>topRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottomRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>length</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QConeGeometry</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>QConeGeometry</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasTopEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasBottomEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>topRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottomRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHasTopEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>(bool hasTopEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHasBottomEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>(bool hasBottomEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>(float topRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>(float bottomRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hasTopEndcapChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>(bool hasTopEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hasBottomEndcapChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>(bool hasBottomEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topRadiusChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>(float topRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomRadiusChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>(float bottomRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lengthChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QConeGeometry</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>QConeGeometry-1</anchor>
            <arglist>(QConeGeometryPrivate &amp;dd, QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QConeMesh</name>
        <filename>qt3dextras-qconemesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>hasTopEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>hasBottomEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>topRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottomRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>length</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QConeMesh</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>QConeMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasTopEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasBottomEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>topRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottomRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHasTopEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>(bool hasTopEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHasBottomEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>(bool hasBottomEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>(float topRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>(float bottomRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hasTopEndcapChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>(bool hasTopEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hasBottomEndcapChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>(bool hasBottomEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topRadiusChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>(float topRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomRadiusChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>(float bottomRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lengthChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QCuboidGeometry</name>
        <filename>qt3dextras-qcuboidgeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="float">
            <name>xExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>yExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>zExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xyMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>yzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCuboidGeometry</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>QCuboidGeometry</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>xExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>yExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>zExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>yzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xyMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYZMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXZMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXYMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yzMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;yzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xzMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xyMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xyMeshResolution)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QCuboidMesh</name>
        <filename>qt3dextras-qcuboidmesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="float">
            <name>xExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>yExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>zExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>yzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xyMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCuboidMesh</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>QCuboidMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>xExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>yExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>zExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>yzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xyMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYZMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXZMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXYMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yzMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;yzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xzMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xyMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xyMeshResolution)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QCylinderGeometry</name>
        <filename>qt3dextras-qcylindergeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>length</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCylinderGeometry</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>QCylinderGeometry</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lengthChanged</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QCylinderMesh</name>
        <filename>qt3dextras-qcylindermesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>length</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCylinderMesh</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>QCylinderMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lengthChanged</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QPlaneGeometry</name>
        <filename>qt3dextras-qplanegeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="float">
            <name>width</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>height</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>resolution</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mirrored</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaneGeometry</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>QPlaneGeometry</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>resolution</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>width</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>height</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mirrored</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolution</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMirrored</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resolutionChanged</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mirroredChanged</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QPlaneMesh</name>
        <filename>qt3dextras-qplanemesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="float">
            <name>width</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>height</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>meshResolution</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mirrored</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaneMesh</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>QPlaneMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>width</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>height</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>meshResolution</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mirrored</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMeshResolution</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMirrored</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>meshResolutionChanged</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist>(const QSize &amp;meshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mirroredChanged</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QSphereGeometry</name>
        <filename>qt3dextras-qspheregeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>generateTangents</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSphereGeometry</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>QSphereGeometry</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>generateTangents</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGenerateTangents</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool gen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateTangentsChanged</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool generateTangents)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QSphereMesh</name>
        <filename>qt3dextras-qspheremesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>generateTangents</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSphereMesh</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>QSphereMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>generateTangents</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGenerateTangents</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool gen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateTangentsChanged</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool generateTangents)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QTorusGeometry</name>
        <filename>qt3dextras-qtorusgeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>minorRadius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTorusGeometry</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>QTorusGeometry</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>minorRadius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinorRadius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minorRadiusChanged</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QTorusMesh</name>
        <filename>qt3dextras-qtorusmesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>minorRadius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTorusMesh</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>QTorusMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>minorRadius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinorRadius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minorRadiusChanged</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QText2DEntity</name>
        <filename>qt3dextras-qtext2dentity.html</filename>
        <base>QEntity</base>
        <member kind="property" type="QFont">
            <name>font</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>color</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>width</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>height</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QText2DEntity</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>QText2DEntity</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QText2DEntity</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>dtor.QText2DEntity</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>width</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>height</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fontChanged</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorChanged</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textChanged</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DInput</name>
        <filename>qt3dinput.html</filename>
        <class>Qt3DInput::QAbstractActionInput</class>
        <class>Qt3DInput::QAbstractAxisInput</class>
        <class>Qt3DInput::QAbstractPhysicalDevice</class>
        <class>Qt3DInput::QAction</class>
        <class>Qt3DInput::QActionInput</class>
        <class>Qt3DInput::QAnalogAxisInput</class>
        <class>Qt3DInput::QAxis</class>
        <class>Qt3DInput::QAxisAccumulator</class>
        <class>Qt3DInput::QAxisSetting</class>
        <class>Qt3DInput::QButtonAxisInput</class>
        <class>Qt3DInput::QInputAspect</class>
        <class>Qt3DInput::QInputChord</class>
        <class>Qt3DInput::QInputSequence</class>
        <class>Qt3DInput::QInputSettings</class>
        <class>Qt3DInput::QKeyboardDevice</class>
        <class>Qt3DInput::QKeyboardHandler</class>
        <member kind="typedef" type="">
            <name>QKeyEventPtr</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>QKeyEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DInput::QKeyEvent</class>
        <class>Qt3DInput::QLogicalDevice</class>
        <class>Qt3DInput::QMouseDevice</class>
        <class>Qt3DInput::QMouseEvent</class>
        <member kind="typedef" type="">
            <name>QMouseEventPtr</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>QMouseEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DInput::QWheelEvent</class>
        <member kind="typedef" type="">
            <name>QWheelEventPtr</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>QWheelEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DInput::QMouseHandler</class>
        <class>Qt3DInput::QPhysicalDeviceCreatedChangeBase</class>
        <member kind="typedef" type="">
            <name>QPhysicalDeviceCreatedChangeBasePtr</name>
            <anchorfile>qt3dinput.html</anchorfile>
            <anchor>QPhysicalDeviceCreatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DInput::QPhysicalDeviceCreatedChange</class>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAbstractActionInput</name>
        <filename>qt3dinput-qabstractactioninput.html</filename>
        <base>QNode</base>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAbstractAxisInput</name>
        <filename>qt3dinput-qabstractaxisinput.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DInput::QAbstractPhysicalDevice *">
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qabstractaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractPhysicalDevice *</type>
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qabstractaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceDevice</name>
            <anchorfile>qt3dinput-qabstractaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceDeviceChanged</name>
            <anchorfile>qt3dinput-qabstractaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAxisInput</name>
            <anchorfile>qt3dinput-qabstractaxisinput.html</anchorfile>
            <anchor>QAbstractAxisInput</anchor>
            <arglist>(QAbstractAxisInputPrivate &amp;dd, QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAbstractPhysicalDevice</name>
        <filename>qt3dinput-qabstractphysicaldevice.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractPhysicalDevice</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>QAbstractPhysicalDevice</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisCount</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonCount</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>buttonCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>axisNames</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>buttonNames</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>buttonNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisIdentifier</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisIdentifier</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonIdentifier</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>buttonIdentifier</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAxisSetting</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>addAxisSetting</anchor>
            <arglist>(QAxisSetting *axisSetting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAxisSetting</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>removeAxisSetting</anchor>
            <arglist>(QAxisSetting *axisSetting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAxisSetting *&gt;</type>
            <name>axisSettings</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisSettings</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractPhysicalDevice</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>QAbstractPhysicalDevice-1</anchor>
            <arglist>(QAbstractPhysicalDevicePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAction</name>
        <filename>qt3dinput-qaction.html</filename>
        <base>QNode</base>
        <member kind="property" type="bool">
            <name>active</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAction</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>QAction</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addInput</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>addInput</anchor>
            <arglist>(QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeInput</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>removeInput</anchor>
            <arglist>(QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAbstractActionInput *&gt;</type>
            <name>inputs</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>inputs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeChanged</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>(bool isActive)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QActionInput</name>
        <filename>qt3dinput-qactioninput.html</filename>
        <base>QAbstractActionInput</base>
        <member kind="property" type="Qt3DInput::QAbstractPhysicalDevice *">
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;int&gt;">
            <name>buttons</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QActionInput</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>QActionInput</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractPhysicalDevice *</type>
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>buttons</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceDevice</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButtons</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>setButtons</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceDeviceChanged</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDeviceChanged</anchor>
            <arglist>(QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonsChanged</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>buttonsChanged</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;buttons)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAnalogAxisInput</name>
        <filename>qt3dinput-qanalogaxisinput.html</filename>
        <base>QAbstractAxisInput</base>
        <member kind="property" type="int">
            <name>axis</name>
            <anchorfile>qt3dinput-qanalogaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnalogAxisInput</name>
            <anchorfile>qt3dinput-qanalogaxisinput.html</anchorfile>
            <anchor>QAnalogAxisInput</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>axis</name>
            <anchorfile>qt3dinput-qanalogaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAxis</name>
            <anchorfile>qt3dinput-qanalogaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>(int axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>axisChanged</name>
            <anchorfile>qt3dinput-qanalogaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>(int axis)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAxis</name>
        <filename>qt3dinput-qaxis.html</filename>
        <base>QNode</base>
        <member kind="property" type="float">
            <name>value</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxis</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>QAxis</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addInput</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>addInput</anchor>
            <arglist>(QAbstractAxisInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeInput</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>removeInput</anchor>
            <arglist>(QAbstractAxisInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAbstractAxisInput *&gt;</type>
            <name>inputs</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>inputs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>value</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAxisAccumulator</name>
        <filename>qt3dinput-qaxisaccumulator.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DInput::QAxis *">
            <name>sourceAxis</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>sourceAxis-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SourceAxisType">
            <name>sourceAxisType</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>sourceAxisType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>scale</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>value</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>velocity</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>velocity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SourceAxisType</name>
            <anchor>SourceAxisType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Velocity">
            <anchor>SourceAxisType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Acceleration">
            <anchor>SourceAxisType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxisAccumulator</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>QAxisAccumulator</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QAxis *</type>
            <name>sourceAxis</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>sourceAxis</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SourceAxisType</type>
            <name>sourceAxisType</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>sourceAxisType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>value</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>velocity</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>velocity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scale</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceAxis</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>sourceAxis-prop</anchor>
            <arglist>(Qt3DInput::QAxis *sourceAxis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceAxisType</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>setSourceAxisType</anchor>
            <arglist>(QAxisAccumulator::SourceAxisType sourceAxisType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceAxisChanged</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>sourceAxis-prop</anchor>
            <arglist>(Qt3DInput::QAxis *sourceAxis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceAxisTypeChanged</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>sourceAxisType-prop</anchor>
            <arglist>(QAxisAccumulator::SourceAxisType sourceAxisType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>velocityChanged</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>velocity-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAxisSetting</name>
        <filename>qt3dinput-qaxissetting.html</filename>
        <base>QNode</base>
        <member kind="property" type="float">
            <name>deadZoneRadius</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>deadZoneRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;int&gt;">
            <name>axes</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>axes-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>smooth</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxisSetting</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>QAxisSetting</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>deadZoneRadius</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>deadZoneRadius</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>axes</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>axes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSmoothEnabled</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>isSmoothEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeadZoneRadius</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>setDeadZoneRadius</anchor>
            <arglist>(float deadZoneRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAxes</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>setAxes</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;axes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSmoothEnabled</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>setSmoothEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deadZoneRadiusChanged</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>deadZoneRadiusChanged</anchor>
            <arglist>(float deadZoneRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>axesChanged</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>axesChanged</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;axes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>smoothChanged</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>smoothChanged</anchor>
            <arglist>(bool smooth)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QButtonAxisInput</name>
        <filename>qt3dinput-qbuttonaxisinput.html</filename>
        <base>QAbstractAxisInput</base>
        <member kind="property" type="float">
            <name>scale</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;int&gt;">
            <name>buttons</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>acceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>deceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QButtonAxisInput</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>QButtonAxisInput</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scale</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>buttons</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>acceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>deceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButtons</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>(float acceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>(float deceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonsChanged</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accelerationChanged</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>(float acceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>decelerationChanged</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>(float deceleration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputAspect</name>
        <filename>qt3dinput-qinputaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputAspect</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>QInputAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractPhysicalDevice *</type>
            <name>createPhysicalDevice</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>createPhysicalDevice</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>availablePhysicalDevices</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>availablePhysicalDevices</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputChord</name>
        <filename>qt3dinput-qinputchord.html</filename>
        <base>QAbstractActionInput</base>
        <member kind="property" type="int">
            <name>timeout</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputChord</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>QInputChord</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timeout</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addChord</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>addChord</anchor>
            <arglist>(QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeChord</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>removeChord</anchor>
            <arglist>(QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAbstractActionInput *&gt;</type>
            <name>chords</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>chords</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeout</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>setTimeout</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>timeoutChanged</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>(int timeout)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputSequence</name>
        <filename>qt3dinput-qinputsequence.html</filename>
        <base>QAbstractActionInput</base>
        <member kind="property" type="int">
            <name>timeout</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttonInterval</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>buttonInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputSequence</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>QInputSequence</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timeout</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>timeout</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttonInterval</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>buttonInterval</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addSequence</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>addSequence</anchor>
            <arglist>(QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeSequence</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>removeSequence</anchor>
            <arglist>(QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAbstractActionInput *&gt;</type>
            <name>sequences</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>sequences</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeout</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButtonInterval</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>buttonInterval-prop</anchor>
            <arglist>(int buttonInterval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>timeoutChanged</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonIntervalChanged</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>buttonInterval-prop</anchor>
            <arglist>(int buttonInterval)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputSettings</name>
        <filename>qt3dinput-qinputsettings.html</filename>
        <base>QComponent</base>
        <member kind="property" type="QObject *">
            <name>eventSource</name>
            <anchorfile>qt3dinput-qinputsettings.html</anchorfile>
            <anchor>eventSource-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputSettings</name>
            <anchorfile>qt3dinput-qinputsettings.html</anchorfile>
            <anchor>QInputSettings</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QInputSettings</name>
            <anchorfile>qt3dinput-qinputsettings.html</anchorfile>
            <anchor>dtor.QInputSettings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>eventSource</name>
            <anchorfile>qt3dinput-qinputsettings.html</anchorfile>
            <anchor>eventSource-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEventSource</name>
            <anchorfile>qt3dinput-qinputsettings.html</anchorfile>
            <anchor>eventSource-prop</anchor>
            <arglist>(QObject *eventSource)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>eventSourceChanged</name>
            <anchorfile>qt3dinput-qinputsettings.html</anchorfile>
            <anchor>eventSource-prop</anchor>
            <arglist>(QObject *)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QKeyboardDevice</name>
        <filename>qt3dinput-qkeyboarddevice.html</filename>
        <base>QAbstractPhysicalDevice</base>
        <member kind="property" type="Qt3DInput::QKeyboardHandler *">
            <name>activeInput</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyboardDevice</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>QKeyboardDevice</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyboardHandler *</type>
            <name>activeInput</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisCount</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>axisCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonCount</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>buttonCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>axisNames</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>axisNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>buttonNames</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>buttonNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisIdentifier</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>axisIdentifier</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonIdentifier</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>buttonIdentifier</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeInputChanged</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist>(QKeyboardHandler *activeInput)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QKeyboardHandler</name>
        <filename>qt3dinput-qkeyboardhandler.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DInput::QKeyboardDevice *">
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>focus</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyboardHandler</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>QKeyboardHandler</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QKeyboardDevice *</type>
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>sourceDevice</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>focus</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceDevice</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(Qt3DInput::QKeyboardDevice *keyboardDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>setFocus</anchor>
            <arglist>(bool focus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceDeviceChanged</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(QKeyboardDevice *keyboardDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusChanged</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>(bool focus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit0Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit0Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit1Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit1Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit2Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit2Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit3Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit3Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit4Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit4Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit5Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit5Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit6Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit6Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit7Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit7Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit8Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit8Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit9Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit9Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>leftPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>rightPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>upPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>upPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>downPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>downPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>tabPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backtabPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>backtabPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>asteriskPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>asteriskPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>numberSignPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>numberSignPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>escapePressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>escapePressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>returnPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>returnPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enterPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>enterPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deletePressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>deletePressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>spacePressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>spacePressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>backPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancelPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>cancelPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>selectPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yesPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>yesPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>noPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>noPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context1Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>context1Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context2Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>context2Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context3Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>context3Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context4Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>context4Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>callPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>callPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hangupPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>hangupPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flipPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>flipPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>menuPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>menuPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeUpPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>volumeUpPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeDownPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>volumeDownPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>released</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QKeyEvent</name>
        <filename>qt3dinput-qkeyevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>key</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>modifiers</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isAutoRepeat</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>isAutoRepeat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="quint32">
            <name>nativeScanCode</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>nativeScanCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyEvent</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>QKeyEvent</anchor>
            <arglist>(QEvent::Type type, int key, Qt::KeyboardModifiers modifiers, const QString &amp;text, bool autorep, ushort count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyEvent</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>QKeyEvent-1</anchor>
            <arglist>(const QKeyEvent &amp;ke)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>key</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>modifiers</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAutoRepeat</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>isAutoRepeat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>nativeScanCode</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>nativeScanCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matches</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>matches</anchor>
            <arglist>(QKeySequence::StandardKey key_) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QLogicalDevice</name>
        <filename>qt3dinput-qlogicaldevice.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLogicalDevice</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>QLogicalDevice</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLogicalDevice</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>dtor.QLogicalDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAction</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>addAction</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAction</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>removeAction</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAction *&gt;</type>
            <name>actions</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>actions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAxis</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>addAxis</anchor>
            <arglist>(QAxis *axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAxis</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>removeAxis</anchor>
            <arglist>(QAxis *axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAxis *&gt;</type>
            <name>axes</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>axes</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QMouseDevice</name>
        <filename>qt3dinput-qmousedevice.html</filename>
        <base>QAbstractPhysicalDevice</base>
        <member kind="property" type="float">
            <name>sensitivity</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseDevice</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>QMouseDevice</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enum">
            <name>Axis</name>
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="X">
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Y">
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WheelX">
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WheelY">
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisCount</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>axisCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonCount</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>buttonCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>axisNames</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>axisNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>buttonNames</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>buttonNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisIdentifier</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>axisIdentifier</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonIdentifier</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>buttonIdentifier</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>sensitivity</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSensitivity</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sensitivityChanged</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QMouseEvent</name>
        <filename>qt3dinput-qmouseevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>x</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>y</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>wasHeld</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>wasHeld-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DInput::QMouseEvent::Buttons">
            <name>button</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>button-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttons</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DInput::QMouseEvent::Modifiers">
            <name>modifiers</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Buttons</name>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiddleButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Modifiers</name>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShiftModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ControlModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AltModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetaModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeypadModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEvent</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>QMouseEvent</anchor>
            <arglist>(const QMouseEvent &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMouseEvent</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>dtor.QMouseEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wasHeld</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>wasHeld-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Buttons</type>
            <name>button</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>button</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttons</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Modifiers</type>
            <name>modifiers</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>isAccepted</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>setAccepted</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QWheelEvent</name>
        <filename>qt3dinput-qwheelevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>x</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>y</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPoint">
            <name>angleDelta</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>angleDelta-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttons</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DInput::QWheelEvent::Modifiers">
            <name>modifiers</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Buttons</name>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiddleButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Modifiers</name>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShiftModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ControlModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AltModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetaModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeypadModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>QWheelEvent</anchor>
            <arglist>(const QWheelEvent &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWheelEvent</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>dtor.QWheelEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>angleDelta</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>angleDelta</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttons</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Modifiers</type>
            <name>modifiers</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>isAccepted</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>setAccepted</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QMouseHandler</name>
        <filename>qt3dinput-qmousehandler.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DInput::QMouseDevice *">
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>containsMouse</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseHandler</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>QMouseHandler</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMouseHandler</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>dtor.QMouseHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMouseDevice *</type>
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsMouse</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceDevice</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>setSourceDevice</anchor>
            <arglist>(QMouseDevice *mouseDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceDeviceChanged</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(QMouseDevice *mouseDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>containsMouseChanged</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist>(bool containsMouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doubleClicked</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>doubleClicked</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entered</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>entered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exited</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>exited</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>released</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressAndHold</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>pressAndHold</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>positionChanged</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wheel</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>wheel</anchor>
            <arglist>(Qt3DInput::QWheelEvent *wheel)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QPhysicalDeviceCreatedChangeBase</name>
        <filename>qt3dinput-qphysicaldevicecreatedchangebase.html</filename>
        <base>QNodeCreatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPhysicalDeviceCreatedChangeBase</name>
            <anchorfile>qt3dinput-qphysicaldevicecreatedchangebase.html</anchorfile>
            <anchor>QPhysicalDeviceCreatedChangeBase</anchor>
            <arglist>(const QAbstractPhysicalDevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPhysicalDeviceCreatedChangeBase</name>
            <anchorfile>qt3dinput-qphysicaldevicecreatedchangebase.html</anchorfile>
            <anchor>dtor.QPhysicalDeviceCreatedChangeBase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeIdVector</type>
            <name>axisSettingIds</name>
            <anchorfile>qt3dinput-qphysicaldevicecreatedchangebase.html</anchorfile>
            <anchor>axisSettingIds</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QPhysicalDeviceCreatedChange</name>
        <filename>qt3dinput-qphysicaldevicecreatedchange.html</filename>
        <base>QPhysicalDeviceCreatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPhysicalDeviceCreatedChange</name>
            <anchorfile>qt3dinput-qphysicaldevicecreatedchange.html</anchorfile>
            <anchor>QPhysicalDeviceCreatedChange</anchor>
            <arglist>(const QAbstractPhysicalDevice *_device)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DLogic</name>
        <filename>qt3dlogic.html</filename>
        <namespace>Qt3DLogic::Logic</namespace>
        <class>Qt3DLogic::QFrameAction</class>
        <class>Qt3DLogic::QLogicAspect</class>
    </compound>
    <compound kind="namespace">
        <name>Qt3DLogic::Logic</name>
        <filename>qt3dlogic-logic.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DLogic::QFrameAction</name>
        <filename>qt3dlogic-qframeaction.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrameAction</name>
            <anchorfile>qt3dlogic-qframeaction.html</anchorfile>
            <anchor>QFrameAction</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>triggered</name>
            <anchorfile>qt3dlogic-qframeaction.html</anchorfile>
            <anchor>triggered</anchor>
            <arglist>(float dt)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DLogic::QLogicAspect</name>
        <filename>qt3dlogic-qlogicaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLogicAspect</name>
            <anchorfile>qt3dlogic-qlogicaspect.html</anchorfile>
            <anchor>QLogicAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AbstractAnimation</name>
        <filename>qml-qt3d-animation-abstractanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AbstractClipAnimator</name>
        <filename>qml-qt3d-animation-abstractclipanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AbstractClipBlendNode</name>
        <filename>qml-qt3d-animation-abstractclipblendnode.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AdditiveClipBlend</name>
        <filename>qml-qt3d-animation-additiveclipblend.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AnimationController</name>
        <filename>qml-qt3d-animation-animationcontroller.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AnimationGroup</name>
        <filename>qml-qt3d-animation-animationgroup.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.BlendedClipAnimator</name>
        <filename>qml-qt3d-animation-blendedclipanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.ClipAnimator</name>
        <filename>qml-qt3d-animation-clipanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.KeyframeAnimation</name>
        <filename>qml-qt3d-animation-keyframeanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.LerpBlend</name>
        <filename>qml-qt3d-animation-lerpblend.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.MorphingAnimation</name>
        <filename>qml-qt3d-animation-morphinganimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.MorphTarget</name>
        <filename>qml-qt3d-animation-morphtarget.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.VertexBlendAnimation</name>
        <filename>qml-qt3d-animation-vertexblendanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Component3D</name>
        <filename>qml-qt3d-core-component3d.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Transform</name>
        <filename>qml-qt3d-core-transform.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LevelOfDetailLoader</name>
        <filename>qml-qt3d-render-levelofdetailloader.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.FirstPersonCameraController</name>
        <filename>qml-qt3d-extras-firstpersoncameracontroller.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.OrbitCameraController</name>
        <filename>qml-qt3d-extras-orbitcameracontroller.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.DiffuseMapMaterial</name>
        <filename>qml-qt3d-extras-diffusemapmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.DiffuseSpecularMapMaterial</name>
        <filename>qml-qt3d-extras-diffusespecularmapmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.GoochMaterial</name>
        <filename>qml-qt3d-extras-goochmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.NormalDiffuseMapAlphaMaterial</name>
        <filename>qml-qt3d-extras-normaldiffusemapalphamaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.NormalDiffuseMapMaterial</name>
        <filename>qml-qt3d-extras-normaldiffusemapmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.NormalDiffuseSpecularMapMaterial</name>
        <filename>qml-qt3d-extras-normaldiffusespecularmapmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.PerVertexColorMaterial</name>
        <filename>qml-qt3d-extras-pervertexcolormaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.PhongAlphaMaterial</name>
        <filename>qml-qt3d-extras-phongalphamaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.PhongMaterial</name>
        <filename>qml-qt3d-extras-phongmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.ExtrudedTextGeometry</name>
        <filename>qml-qt3d-extras-extrudedtextgeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.ExtrudedTextMesh</name>
        <filename>qml-qt3d-extras-extrudedtextmesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.ForwardRenderer</name>
        <filename>qml-qt3d-extras-forwardrenderer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.ConeGeometry</name>
        <filename>qml-qt3d-extras-conegeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.ConeMesh</name>
        <filename>qml-qt3d-extras-conemesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.CuboidGeometry</name>
        <filename>qml-qt3d-extras-cuboidgeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.CuboidMesh</name>
        <filename>qml-qt3d-extras-cuboidmesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.CylinderGeometry</name>
        <filename>qml-qt3d-extras-cylindergeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.CylinderMesh</name>
        <filename>qml-qt3d-extras-cylindermesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.PlaneGeometry</name>
        <filename>qml-qt3d-extras-planegeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.PlaneMesh</name>
        <filename>qml-qt3d-extras-planemesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.SphereGeometry</name>
        <filename>qml-qt3d-extras-spheregeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.SphereMesh</name>
        <filename>qml-qt3d-extras-spheremesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.TorusGeometry</name>
        <filename>qml-qt3d-extras-torusgeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.TorusMesh</name>
        <filename>qml-qt3d-extras-torusmesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AbstractActionInput</name>
        <filename>qml-qt3d-input-abstractactioninput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AbstractAxisInput</name>
        <filename>qml-qt3d-input-abstractaxisinput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AbstractPhysicalDevice</name>
        <filename>qml-qt3d-input-abstractphysicaldevice.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.Action</name>
        <filename>qml-qt3d-input-action.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.ActionInput</name>
        <filename>qml-qt3d-input-actioninput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AnalogAxisInput</name>
        <filename>qml-qt3d-input-analogaxisinput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.Axis</name>
        <filename>qml-qt3d-input-axis.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AxisAccumulator</name>
        <filename>qml-qt3d-input-axisaccumulator.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AxisSetting</name>
        <filename>qml-qt3d-input-axissetting.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.ButtonAxisInput</name>
        <filename>qml-qt3d-input-buttonaxisinput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.InputChord</name>
        <filename>qml-qt3d-input-inputchord.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.InputSequence</name>
        <filename>qml-qt3d-input-inputsequence.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.InputSettings</name>
        <filename>qml-qt3d-input-inputsettings.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyboardDevice</name>
        <filename>qml-qt3d-input-keyboarddevice.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyboardHandler</name>
        <filename>qml-qt3d-input-keyboardhandler.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyEvent</name>
        <filename>qml-qt3d-input-keyevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.LogicalDevice</name>
        <filename>qml-qt3d-input-logicaldevice.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.MouseDevice</name>
        <filename>qml-qt3d-input-mousedevice.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.MouseEvent</name>
        <filename>qml-qt3d-input-mouseevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.WheelEvent</name>
        <filename>qml-qt3d-input-wheelevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.MouseHandler</name>
        <filename>qml-qt3d-input-mousehandler.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Logic.FrameAction</name>
        <filename>qml-qt3d-logic-frameaction.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Entity</name>
        <filename>qml-qt3d-core-entity.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.EntityLoader</name>
        <filename>qml-qt3d-core-entityloader.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Node</name>
        <filename>qml-qt3d-core-node.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.NodeInstantiator</name>
        <filename>qml-qt3d-core-nodeinstantiator.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.QuaternionAnimation</name>
        <filename>qml-qt3d-core-quaternionanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Scene2D.Scene2D</name>
        <filename>qml-qt3d-scene2d-scene2d.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.CameraSelector</name>
        <filename>qml-qt3d-render-cameraselector.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ClearBuffers</name>
        <filename>qml-qt3d-render-clearbuffers.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.DispatchCompute</name>
        <filename>qml-qt3d-render-dispatchcompute.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.FrameGraphNode</name>
        <filename>qml-qt3d-render-framegraphnode.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.FrustumCulling</name>
        <filename>qml-qt3d-render-frustumculling.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LayerFilter</name>
        <filename>qml-qt3d-render-layerfilter.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.MemoryBarrier</name>
        <filename>qml-qt3d-render-memorybarrier.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.NoDraw</name>
        <filename>qml-qt3d-render-nodraw.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderCapture</name>
        <filename>qml-qt3d-render-rendercapture.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderCaptureReply</name>
        <filename>qml-qt3d-render-rendercapturereply.html</filename>
    </compound>
    <compound kind="class">
        <name>RenderPassFilter</name>
        <filename>qml-renderpassfilter.html</filename>
    </compound>
    <compound kind="class">
        <name>RenderStateSet</name>
        <filename>qml-renderstateset.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderSurfaceSelector</name>
        <filename>qml-qt3d-render-rendersurfaceselector.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderTargetSelector</name>
        <filename>qml-qt3d-render-rendertargetselector.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SortPolicy</name>
        <filename>qml-qt3d-render-sortpolicy.html</filename>
    </compound>
    <compound kind="class">
        <name>TechniqueFilter</name>
        <filename>qml-techniquefilter.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Viewport</name>
        <filename>qml-qt3d-render-viewport.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Camera</name>
        <filename>qml-qt3d-render-camera.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.CameraLens</name>
        <filename>qml-qt3d-render-cameralens.html</filename>
    </compound>
    <compound kind="class">
        <name>ComputeCommand</name>
        <filename>qml-computecommand.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Layer</name>
        <filename>qml-qt3d-render-layer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LevelOfDetail</name>
        <filename>qml-qt3d-render-levelofdetail.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LevelOfDetail</name>
        <filename>qml-qt3d-render-levelofdetail.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LevelOfDetailSwitch</name>
        <filename>qml-qt3d-render-levelofdetailswitch.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PickingSettings</name>
        <filename>qml-qt3d-render-pickingsettings.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderSettings</name>
        <filename>qml-qt3d-render-rendersettings.html</filename>
    </compound>
    <compound kind="class">
        <name>RenderTarget</name>
        <filename>qml-rendertarget.html</filename>
    </compound>
    <compound kind="class">
        <name>RenderTargetOutput</name>
        <filename>qml-rendertargetoutput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Attribute</name>
        <filename>qml-qt3d-render-attribute.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Buffer</name>
        <filename>qml-qt3d-render-buffer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Geometry</name>
        <filename>qml-qt3d-render-geometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.GeometryRenderer</name>
        <filename>qml-qt3d-render-geometryrenderer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Mesh</name>
        <filename>qml-qt3d-render-mesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SceneLoader</name>
        <filename>qml-qt3d-render-sceneloader.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Light</name>
        <filename>qml-qt3d-render-light.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.DirectionalLight</name>
        <filename>qml-qt3d-render-directionallight.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.EnvironmentLight</name>
        <filename>qml-qt3d-render-environmentlight.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PointLight</name>
        <filename>qml-qt3d-render-pointlight.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SpotLight</name>
        <filename>qml-qt3d-render-spotlight.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Effect</name>
        <filename>qml-qt3d-render-effect.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.FilterKey</name>
        <filename>qml-qt3d-render-filterkey.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.GraphicsApiFilter</name>
        <filename>qml-qt3d-render-graphicsapifilter.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Material</name>
        <filename>qml-qt3d-render-material.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Parameter</name>
        <filename>qml-qt3d-render-parameter.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderPass</name>
        <filename>qml-qt3d-render-renderpass.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ShaderProgram</name>
        <filename>qml-qt3d-render-shaderprogram.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Technique</name>
        <filename>qml-qt3d-render-technique.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ObjectPicker</name>
        <filename>qml-qt3d-render-objectpicker.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PickEvent</name>
        <filename>qml-qt3d-render-pickevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PickTriangleEvent</name>
        <filename>qml-qt3d-render-picktriangleevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.AlphaCoverage</name>
        <filename>qml-qt3d-render-alphacoverage.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.AlphaTest</name>
        <filename>qml-qt3d-render-alphatest.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.BlendEquation</name>
        <filename>qml-qt3d-render-blendequation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.BlendEquationArguments</name>
        <filename>qml-qt3d-render-blendequationarguments.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ClipPlane</name>
        <filename>qml-qt3d-render-clipplane.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ColorMask</name>
        <filename>qml-qt3d-render-colormask.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.CullFace</name>
        <filename>qml-qt3d-render-cullface.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.DepthTest</name>
        <filename>qml-qt3d-render-depthtest.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Dithering</name>
        <filename>qml-qt3d-render-dithering.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.FrontFace</name>
        <filename>qml-qt3d-render-frontface.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.MultiSampleAntiAliasing</name>
        <filename>qml-qt3d-render-multisampleantialiasing.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.NoDepthMask</name>
        <filename>qml-qt3d-render-nodepthmask.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PointSize</name>
        <filename>qml-qt3d-render-pointsize.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PolygonOffset</name>
        <filename>qml-qt3d-render-polygonoffset.html</filename>
    </compound>
    <compound kind="class">
        <name>RenderState</name>
        <filename>qml-renderstate.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ScissorTest</name>
        <filename>qml-qt3d-render-scissortest.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SeamlessCubemap</name>
        <filename>qml-qt3d-render-seamlesscubemap.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.StencilMask</name>
        <filename>qml-qt3d-render-stencilmask.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.StencilOperation</name>
        <filename>qml-qt3d-render-stenciloperation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.StencilOperationArguments</name>
        <filename>qml-qt3d-render-stenciloperationarguments.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.StencilTest</name>
        <filename>qml-qt3d-render-stenciltest.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.StencilTestArguments</name>
        <filename>qml-qt3d-render-stenciltestarguments.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.AbstractTextureImage</name>
        <filename>qml-qt3d-render-abstracttextureimage.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.TextureImage</name>
        <filename>qml-qt3d-render-textureimage.html</filename>
    </compound>
</tagfile>
