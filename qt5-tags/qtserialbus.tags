<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QCanBus</name>
        <filename>qcanbus.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCanBus *</type>
            <name>instance</name>
            <anchorfile>qcanbus.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>plugins</name>
            <anchorfile>qcanbus.html</anchorfile>
            <anchor>plugins</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QCanBusDeviceInfo&gt;</type>
            <name>availableDevices</name>
            <anchorfile>qcanbus.html</anchorfile>
            <anchor>availableDevices</anchor>
            <arglist>(const QString &amp;plugin, QString *errorMessage) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusDevice *</type>
            <name>createDevice</name>
            <anchorfile>qcanbus.html</anchorfile>
            <anchor>createDevice</anchor>
            <arglist>(const QString &amp;plugin, const QString &amp;interfaceName, QString *errorMessage) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusDevice</name>
        <filename>qcanbusdevice.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>CanBusError</name>
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadError">
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteError">
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectionError">
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConfigurationError">
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CanBusDeviceState</name>
            <anchor>CanBusDeviceState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnconnectedState">
            <anchor>CanBusDeviceState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectingState">
            <anchor>CanBusDeviceState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectedState">
            <anchor>CanBusDeviceState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClosingState">
            <anchor>CanBusDeviceState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ConfigurationKey</name>
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RawFilterKey">
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ErrorFilterKey">
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LoopbackKey">
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReceiveOwnKey">
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BitRateKey">
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanFdKey">
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DataBitRateKey">
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserKey">
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QCanBusDevice::Filter</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCanBusDevice</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>QCanBusDevice</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setConfigurationParameter</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>setConfigurationParameter</anchor>
            <arglist>(int key, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>configurationParameter</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>configurationParameter</anchor>
            <arglist>(int key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>configurationKeys</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>configurationKeys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>writeFrame</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>writeFrame</anchor>
            <arglist>(const QCanBusFrame &amp;frame) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusFrame</type>
            <name>readFrame</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>readFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>framesAvailable</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>framesAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>framesToWrite</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>framesToWrite</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForFramesWritten</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>waitForFramesWritten</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForFramesReceived</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>waitForFramesReceived</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>connectDevice</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>connectDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnectDevice</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>disconnectDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CanBusDeviceState</type>
            <name>state</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CanBusError</type>
            <name>error</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>interpretErrorFrame</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>interpretErrorFrame</anchor>
            <arglist>(const QCanBusFrame &amp;frame) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorOccurred</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>errorOccurred</anchor>
            <arglist>(QCanBusDevice::CanBusError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>framesReceived</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>framesReceived</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>framesWritten</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>framesWritten</anchor>
            <arglist>(qint64 framesCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QCanBusDevice::CanBusDeviceState state)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setState</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(QCanBusDevice::CanBusDeviceState newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(const QString &amp;errorText, QCanBusDevice::CanBusError errorId)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>enqueueReceivedFrames</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>enqueueReceivedFrames</anchor>
            <arglist>(const QVector&lt;QCanBusFrame&gt; &amp;newFrames)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>enqueueOutgoingFrame</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>enqueueOutgoingFrame</anchor>
            <arglist>(const QCanBusFrame &amp;newFrame)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QCanBusFrame</type>
            <name>dequeueOutgoingFrame</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>dequeueOutgoingFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>hasOutgoingFrames</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>hasOutgoingFrames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusDevice::Filter</name>
        <filename>qcanbusdevice-filter.html</filename>
        <member kind="enum">
            <name>FormatFilter</name>
            <anchor>FormatFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchBaseFormat">
            <anchor>FormatFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchExtendedFormat">
            <anchor>FormatFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchBaseAndExtendedFormat">
            <anchor>FormatFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QCanBusDevice::Filter::FormatFilter">
            <name>FormatFilters</name>
            <anchorfile>qcanbusdevice-filter.html</anchorfile>
            <anchor>FormatFilter-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusDeviceInfo</name>
        <filename>qcanbusdeviceinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCanBusDeviceInfo</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>QCanBusDeviceInfo</anchor>
            <arglist>() = delete</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCanBusDeviceInfo</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>QCanBusDeviceInfo-1</anchor>
            <arglist>(const QCanBusDeviceInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCanBusDeviceInfo</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>dtor.QCanBusDeviceInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCanBusDeviceInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusDeviceInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCanBusDeviceInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusDeviceInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QCanBusDeviceInfo &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFlexibleDataRate</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>hasFlexibleDataRate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVirtual</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>isVirtual</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusFactory</name>
        <filename>qcanbusfactory.html</filename>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QCanBusDevice *</type>
            <name>createDevice</name>
            <anchorfile>qcanbusfactory.html</anchorfile>
            <anchor>createDevice</anchor>
            <arglist>(const QString &amp;interfaceName, QString *errorMessage) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusFactoryV2</name>
        <filename>qcanbusfactoryv2.html</filename>
        <base>QCanBusFactory</base>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QCanBusDevice *</type>
            <name>createDevice</name>
            <anchorfile>qcanbusfactoryv2.html</anchorfile>
            <anchor>createDevice</anchor>
            <arglist>(const QString &amp;interfaceName, QString *errorMessage) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;QCanBusDeviceInfo&gt;</type>
            <name>availableDevices</name>
            <anchorfile>qcanbusfactoryv2.html</anchorfile>
            <anchor>availableDevices</anchor>
            <arglist>(QString *errorMessage) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusFrame</name>
        <filename>qcanbusframe.html</filename>
        <class>QCanBusFrame::TimeStamp</class>
        <member kind="enum">
            <name>FrameType</name>
            <anchor>FrameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownFrame">
            <anchor>FrameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DataFrame">
            <anchor>FrameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ErrorFrame">
            <anchor>FrameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoteRequestFrame">
            <anchor>FrameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidFrame">
            <anchor>FrameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCanBusFrame</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>QCanBusFrame</anchor>
            <arglist>(FrameType type)</arglist>
        </member>
        <member kind="enum">
            <name>FrameError</name>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TransmissionTimeoutError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LostArbitrationError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ControllerError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProtocolViolationError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TransceiverError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MissingAcknowledgmentError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BusOffError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BusError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ControllerRestartError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyError">
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QCanBusFrame::FrameError">
            <name>FrameErrors</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCanBusFrame</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>QCanBusFrame-1</anchor>
            <arglist>(quint32 identifier, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FrameType</type>
            <name>frameType</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>frameType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameType</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setFrameType</anchor>
            <arglist>(FrameType newType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasExtendedFrameFormat</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>hasExtendedFrameFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtendedFrameFormat</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setExtendedFrameFormat</anchor>
            <arglist>(bool isExtended)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>frameId</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>frameId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameId</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setFrameId</anchor>
            <arglist>(quint32 newFrameId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPayload</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setPayload</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeStamp</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setTimeStamp</anchor>
            <arglist>(TimeStamp ts)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>payload</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>payload</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TimeStamp</type>
            <name>timeStamp</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>timeStamp</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FrameErrors</type>
            <name>error</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(FrameErrors error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFlexibleDataRateFormat</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>hasFlexibleDataRateFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlexibleDataRateFormat</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setFlexibleDataRateFormat</anchor>
            <arglist>(bool isFlexibleData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasBitrateSwitch</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>hasBitrateSwitch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBitrateSwitch</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setBitrateSwitch</anchor>
            <arglist>(bool bitrateSwitch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasErrorStateIndicator</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>hasErrorStateIndicator</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setErrorStateIndicator</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setErrorStateIndicator</anchor>
            <arglist>(bool errorStateIndicator)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusFrame::TimeStamp</name>
        <filename>qcanbusframe-timestamp.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>TimeStamp</name>
            <anchorfile>qcanbusframe-timestamp.html</anchorfile>
            <anchor>TimeStamp</anchor>
            <arglist>(qint64 s, qint64 usec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>TimeStamp</type>
            <name>fromMicroSeconds</name>
            <anchorfile>qcanbusframe-timestamp.html</anchorfile>
            <anchor>fromMicroSeconds</anchor>
            <arglist>(qint64 usec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>seconds</name>
            <anchorfile>qcanbusframe-timestamp.html</anchorfile>
            <anchor>seconds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>microSeconds</name>
            <anchorfile>qcanbusframe-timestamp.html</anchorfile>
            <anchor>microSeconds</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusClient</name>
        <filename>qmodbusclient.html</filename>
        <base>QModbusDevice</base>
        <member kind="property" type="int">
            <name>timeout</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusClient</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>QModbusClient</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusReply *</type>
            <name>sendReadRequest</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>sendReadRequest</anchor>
            <arglist>(const QModbusDataUnit &amp;read, int serverAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusReply *</type>
            <name>sendWriteRequest</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>sendWriteRequest</anchor>
            <arglist>(const QModbusDataUnit &amp;write, int serverAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusReply *</type>
            <name>sendReadWriteRequest</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>sendReadWriteRequest</anchor>
            <arglist>(const QModbusDataUnit &amp;read, const QModbusDataUnit &amp;write, int serverAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusReply *</type>
            <name>sendRawRequest</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>sendRawRequest</anchor>
            <arglist>(const QModbusRequest &amp;request, int serverAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timeout</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeout</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>setTimeout</anchor>
            <arglist>(int newTimeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>numberOfRetries</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>numberOfRetries</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberOfRetries</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>setNumberOfRetries</anchor>
            <arglist>(int number)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>timeoutChanged</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>timeoutChanged</anchor>
            <arglist>(int newTimeout)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>processResponse</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>processResponse</anchor>
            <arglist>(const QModbusResponse &amp;response, QModbusDataUnit *data)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>processPrivateResponse</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>processPrivateResponse</anchor>
            <arglist>(const QModbusResponse &amp;response, QModbusDataUnit *data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusDataUnit</name>
        <filename>qmodbusdataunit.html</filename>
        <member kind="enum">
            <name>RegisterType</name>
            <anchor>RegisterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>RegisterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DiscreteInputs">
            <anchor>RegisterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Coils">
            <anchor>RegisterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InputRegisters">
            <anchor>RegisterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HoldingRegisters">
            <anchor>RegisterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDataUnit</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>QModbusDataUnit</anchor>
            <arglist>() = default</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDataUnit</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>QModbusDataUnit-1</anchor>
            <arglist>(RegisterType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDataUnit</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>QModbusDataUnit-2</anchor>
            <arglist>(RegisterType type, int address, quint16 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDataUnit</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>QModbusDataUnit-3</anchor>
            <arglist>(RegisterType type, int address, const QVector&lt;quint16&gt; &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RegisterType</type>
            <name>registerType</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>registerType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRegisterType</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>setRegisterType</anchor>
            <arglist>(RegisterType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startAddress</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>startAddress</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartAddress</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>setStartAddress</anchor>
            <arglist>(int address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;quint16&gt;</type>
            <name>values</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValues</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>setValues</anchor>
            <arglist>(const QVector&lt;quint16&gt; &amp;values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>valueCount</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>valueCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValueCount</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>setValueCount</anchor>
            <arglist>(uint newCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(int index, quint16 value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>value</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusDevice</name>
        <filename>qmodbusdevice.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectionError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConfigurationError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TimeoutError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProtocolError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReplyAbortedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnconnectedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectingState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClosingState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ConnectionParameter</name>
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SerialPortNameParameter">
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SerialParityParameter">
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SerialBaudRateParameter">
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SerialDataBitsParameter">
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SerialStopBitsParameter">
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NetworkPortParameter">
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NetworkAddressParameter">
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserParameter">
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDevice</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>QModbusDevice</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QModbusDevice</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>dtor.QModbusDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>connectionParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>connectionParameter</anchor>
            <arglist>(int parameter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConnectionParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>setConnectionParameter</anchor>
            <arglist>(int parameter, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>connectDevice</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>connectDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnectDevice</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>disconnectDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorOccurred</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>errorOccurred</anchor>
            <arglist>(QModbusDevice::Error error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QModbusDevice::State state)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setState</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(QModbusDevice::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(const QString &amp;errorText, QModbusDevice::Error error)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusDeviceIdentification</name>
        <filename>qmodbusdeviceidentification.html</filename>
        <member kind="enum">
            <name>ObjectId</name>
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VendorNameObjectId">
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProductCodeObjectId">
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MajorMinorRevisionObjectId">
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VendorUrlObjectId">
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProductNameObjectId">
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ModelNameObjectId">
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserApplicationNameObjectId">
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReservedObjectId">
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProductDependentObjectId">
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UndefinedObjectId">
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ReadDeviceIdCode</name>
            <anchor>ReadDeviceIdCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BasicReadDeviceIdCode">
            <anchor>ReadDeviceIdCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RegularReadDeviceIdCode">
            <anchor>ReadDeviceIdCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtendedReadDeviceIdCode">
            <anchor>ReadDeviceIdCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndividualReadDeviceIdCode">
            <anchor>ReadDeviceIdCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ConformityLevel</name>
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BasicConformityLevel">
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RegularConformityLevel">
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtendedConformityLevel">
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BasicIndividualConformityLevel">
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RegularIndividualConformityLevel">
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtendedIndividualConformityLevel">
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDeviceIdentification</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>QModbusDeviceIdentification</anchor>
            <arglist>() = default</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>objectIds</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>objectIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(uint objectId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(uint objectId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insert</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(uint objectId, const QByteArray &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>value</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(uint objectId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ConformityLevel</type>
            <name>conformityLevel</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>conformityLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConformityLevel</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>setConformityLevel</anchor>
            <arglist>(ConformityLevel level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QModbusDeviceIdentification</type>
            <name>fromByteArray</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>fromByteArray</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusPdu</name>
        <filename>qmodbuspdu.html</filename>
        <member kind="enum">
            <name>ExceptionCode</name>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IllegalFunction">
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IllegalDataAddress">
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IllegalDataValue">
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServerDeviceFailure">
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Acknowledge">
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServerDeviceBusy">
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NegativeAcknowledge">
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MemoryParityError">
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GatewayPathUnavailable">
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GatewayTargetDeviceFailedToRespond">
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtendedException">
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FunctionCode</name>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadCoils">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadDiscreteInputs">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadHoldingRegisters">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadInputRegisters">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteSingleCoil">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteSingleRegister">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadExceptionStatus">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Diagnostics">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GetCommEventCounter">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GetCommEventLog">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteMultipleCoils">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteMultipleRegisters">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReportServerId">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadFileRecord">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteFileRecord">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaskWriteRegister">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadWriteMultipleRegisters">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadFifoQueue">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EncapsulatedInterfaceTransport">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UndefinedFunctionCode">
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusPdu</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>QModbusPdu</anchor>
            <arglist>() = default</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QModbusPdu</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>dtor.QModbusPdu</anchor>
            <arglist>() = default</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ExceptionCode</type>
            <name>exceptionCode</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>exceptionCode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isException</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>isException</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint16</type>
            <name>size</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint16</type>
            <name>dataSize</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>dataSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FunctionCode</type>
            <name>functionCode</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>functionCode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setFunctionCode</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>setFunctionCode</anchor>
            <arglist>(FunctionCode code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>encodeData</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>encodeData</anchor>
            <arglist>(Args... data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>decodeData</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>decodeData</anchor>
            <arglist>(Args &amp;&amp;... data) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QModbusPdu</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>QModbusPdu-1</anchor>
            <arglist>(FunctionCode code, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QModbusPdu</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>QModbusPdu-2</anchor>
            <arglist>(const QModbusPdu &amp;other) = default</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModbusPdu &amp;</type>
            <name>operator=</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QModbusPdu &amp;other) = default</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusRequest</name>
        <filename>qmodbusrequest.html</filename>
        <base>QModbusPdu</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRequest</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>QModbusRequest</anchor>
            <arglist>() = default</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRequest</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>QModbusRequest-1</anchor>
            <arglist>(const QModbusPdu &amp;pdu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRequest</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>QModbusRequest-2</anchor>
            <arglist>(FunctionCode code, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>minimumDataSize</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>minimumDataSize</anchor>
            <arglist>(const QModbusRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>calculateDataSize</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>calculateDataSize</anchor>
            <arglist>(const QModbusRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>registerDataSizeCalculator</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>registerDataSizeCalculator</anchor>
            <arglist>(FunctionCode fc, CalcFuncPtr calculator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRequest</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>QModbusRequest-3</anchor>
            <arglist>(FunctionCode code, Args... data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusResponse</name>
        <filename>qmodbusresponse.html</filename>
        <base>QModbusPdu</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusResponse</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>QModbusResponse</anchor>
            <arglist>() = default</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusResponse</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>QModbusResponse-1</anchor>
            <arglist>(const QModbusPdu &amp;pdu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusResponse</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>QModbusResponse-2</anchor>
            <arglist>(FunctionCode code, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>minimumDataSize</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>minimumDataSize</anchor>
            <arglist>(const QModbusResponse &amp;response)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>calculateDataSize</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>calculateDataSize</anchor>
            <arglist>(const QModbusResponse &amp;response)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>registerDataSizeCalculator</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>registerDataSizeCalculator</anchor>
            <arglist>(FunctionCode fc, CalcFuncPtr calculator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusResponse</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>QModbusResponse-3</anchor>
            <arglist>(FunctionCode code, Args... data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusExceptionResponse</name>
        <filename>qmodbusexceptionresponse.html</filename>
        <base>QModbusResponse</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusExceptionResponse</name>
            <anchorfile>qmodbusexceptionresponse.html</anchorfile>
            <anchor>QModbusExceptionResponse</anchor>
            <arglist>() = default</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusExceptionResponse</name>
            <anchorfile>qmodbusexceptionresponse.html</anchorfile>
            <anchor>QModbusExceptionResponse-1</anchor>
            <arglist>(const QModbusPdu &amp;pdu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusExceptionResponse</name>
            <anchorfile>qmodbusexceptionresponse.html</anchorfile>
            <anchor>QModbusExceptionResponse-2</anchor>
            <arglist>(FunctionCode code, ExceptionCode ec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setFunctionCode</name>
            <anchorfile>qmodbusexceptionresponse.html</anchorfile>
            <anchor>setFunctionCode</anchor>
            <arglist>(FunctionCode c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExceptionCode</name>
            <anchorfile>qmodbusexceptionresponse.html</anchorfile>
            <anchor>setExceptionCode</anchor>
            <arglist>(ExceptionCode ec)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusReply</name>
        <filename>qmodbusreply.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>ReplyType</name>
            <anchor>ReplyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Raw">
            <anchor>ReplyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Common">
            <anchor>ReplyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusReply</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>QModbusReply</anchor>
            <arglist>(ReplyType type, int serverAddress, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ReplyType</type>
            <name>type</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serverAddress</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>serverAddress</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusDataUnit</type>
            <name>result</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusResponse</type>
            <name>rawResult</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>rawResult</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusDevice::Error</type>
            <name>error</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorOccurred</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>errorOccurred</anchor>
            <arglist>(QModbusDevice::Error error)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusRtuSerialMaster</name>
        <filename>qmodbusrtuserialmaster.html</filename>
        <base>QModbusClient</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRtuSerialMaster</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>QModbusRtuSerialMaster</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>interFrameDelay</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>interFrameDelay</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterFrameDelay</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>setInterFrameDelay</anchor>
            <arglist>(int microseconds)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusRtuSerialSlave</name>
        <filename>qmodbusrtuserialslave.html</filename>
        <base>QModbusServer</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRtuSerialSlave</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>QModbusRtuSerialSlave</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QModbusRtuSerialSlave</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>dtor.QModbusRtuSerialSlave</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>processesBroadcast</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>processesBroadcast</anchor>
            <arglist>() const override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModbusResponse</type>
            <name>processRequest</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>processRequest</anchor>
            <arglist>(const QModbusPdu &amp;request) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusServer</name>
        <filename>qmodbusserver.html</filename>
        <base>QModbusDevice</base>
        <member kind="enum">
            <name>Option</name>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DiagnosticRegister">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExceptionStatusOffset">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeviceBusy">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AsciiInputDelimiter">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListenOnlyMode">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServerIdentifier">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RunIndicatorStatus">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AdditionalData">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeviceIdentification">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserOption">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusServer</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>QModbusServer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serverAddress</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>serverAddress</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setServerAddress</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>setServerAddress</anchor>
            <arglist>(int serverAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setMap</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>setMap</anchor>
            <arglist>(const QModbusDataUnitMap &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>processesBroadcast</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>processesBroadcast</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>value</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(int option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setValue</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(int option, const QVariant &amp;newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>data</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(QModbusDataUnit *newData) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setData</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModbusDataUnit &amp;newData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setData</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>setData-1</anchor>
            <arglist>(QModbusDataUnit::RegisterType table, quint16 address, quint16 data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>data</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>(QModbusDataUnit::RegisterType table, quint16 address, quint16 *data) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataWritten</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>dataWritten</anchor>
            <arglist>(QModbusDataUnit::RegisterType register, int address, int size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>writeData</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const QModbusDataUnit &amp;newData)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>readData</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(QModbusDataUnit *newData) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModbusResponse</type>
            <name>processRequest</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>processRequest</anchor>
            <arglist>(const QModbusPdu &amp;request)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModbusResponse</type>
            <name>processPrivateRequest</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>processPrivateRequest</anchor>
            <arglist>(const QModbusPdu &amp;request)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusTcpClient</name>
        <filename>qmodbustcpclient.html</filename>
        <base>QModbusClient</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusTcpClient</name>
            <anchorfile>qmodbustcpclient.html</anchorfile>
            <anchor>QModbusTcpClient</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QModbusTcpClient</name>
            <anchorfile>qmodbustcpclient.html</anchorfile>
            <anchor>dtor.QModbusTcpClient</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qmodbustcpclient.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmodbustcpclient.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusTcpServer</name>
        <filename>qmodbustcpserver.html</filename>
        <base>QModbusServer</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusTcpServer</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>QModbusTcpServer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QModbusTcpServer</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>dtor.QModbusTcpServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModbusResponse</type>
            <name>processRequest</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>processRequest</anchor>
            <arglist>(const QModbusPdu &amp;request) override</arglist>
        </member>
    </compound>
</tagfile>
